<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Caddy反向代理</title>
      <link href="/Caddy/"/>
      <url>/Caddy/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装-Caddy2"><a href="#1-安装-Caddy2" class="headerlink" title="1. 安装 Caddy2"></a>1. 安装 Caddy2</h2><p>在 Debian&#x2F;Ubuntu 系统上安装 Caddy2，可以按照以下步骤操作：</p><h3 id="安装必要的软件包"><a href="#安装必要的软件包" class="headerlink" title="安装必要的软件包"></a>安装必要的软件包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https</span><br></pre></td></tr></table></figure><h3 id="添加-Caddy-的-GPG-密钥"><a href="#添加-Caddy-的-GPG-密钥" class="headerlink" title="添加 Caddy 的 GPG 密钥"></a>添加 Caddy 的 GPG 密钥</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -1sLf ‘[https://dl.cloudsmith.io/public/caddy/stable/gpg.key](https://dl.cloudsmith.io/public/caddy/stable/gpg.key)’ | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg</span><br></pre></td></tr></table></figure><h3 id="添加-Caddy-的软件源"><a href="#添加-Caddy-的软件源" class="headerlink" title="添加 Caddy 的软件源"></a>添加 Caddy 的软件源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -1sLf ‘[https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt](https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt)’ | sudo tee /etc/apt/sources.list.d/caddy-stable.list</span><br></pre></td></tr></table></figure><h3 id="更新软件包列表"><a href="#更新软件包列表" class="headerlink" title="更新软件包列表"></a>更新软件包列表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="安装-Caddy"><a href="#安装-Caddy" class="headerlink" title="安装 Caddy"></a>安装 Caddy</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install caddy</span><br></pre></td></tr></table></figure><h3 id="检查-Caddy-版本，确认安装成功"><a href="#检查-Caddy-版本，确认安装成功" class="headerlink" title="检查 Caddy 版本，确认安装成功"></a>检查 Caddy 版本，确认安装成功</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">caddy version</span><br></pre></td></tr></table></figure><h2 id="2-配置反向代理"><a href="#2-配置反向代理" class="headerlink" title="2. 配置反向代理"></a>2. 配置反向代理</h2><p>编辑 Caddy 的配置文件（通常位于 <code>/etc/caddy/Caddyfile</code>），添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tz.dabo.im &#123;</span><br><span class="line">    reverse_proxy 127.0.0.1:8008  <span class="comment"># 将此处的 IP 和端口替换为你想反代的服务器地址和端口</span></span><br><span class="line">    encode gzip                   <span class="comment"># 启用 gzip 压缩（可选）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>说明</strong>：<ul><li><code>tz.dabo.im</code> 是你的域名，请替换为实际使用的域名。</li><li>127.0.0.1:8008 是目标服务器的地址和端口，请根据需要修改。</li></ul></li></ul><h2 id="3-管理-Caddy-服务"><a href="#3-管理-Caddy-服务" class="headerlink" title="3. 管理 Caddy 服务"></a>3. 管理 Caddy 服务</h2><p>安装完成后，Caddy 会以系统服务的方式运行，可以使用以下命令进行管理：</p><h3 id="启动-Caddy-服务"><a href="#启动-Caddy-服务" class="headerlink" title="启动 Caddy 服务"></a>启动 Caddy 服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start caddy</span><br></pre></td></tr></table></figure><h3 id="设置-Caddy-开机自启"><a href="#设置-Caddy-开机自启" class="headerlink" title="设置 Caddy 开机自启"></a>设置 Caddy 开机自启</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable caddy</span><br></pre></td></tr></table></figure><h1 id="重启-Caddy-服务"><a href="#重启-Caddy-服务" class="headerlink" title="重启 Caddy 服务"></a>重启 Caddy 服务</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart caddy</span><br></pre></td></tr></table></figure><h1 id="停止-Caddy-服务"><a href="#停止-Caddy-服务" class="headerlink" title="停止 Caddy 服务"></a>停止 Caddy 服务</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop caddy</span><br></pre></td></tr></table></figure><h3 id="修改配置文件后重载配置（不中断服务）"><a href="#修改配置文件后重载配置（不中断服务）" class="headerlink" title="修改配置文件后重载配置（不中断服务）"></a>修改配置文件后重载配置（不中断服务）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl reload caddy</span><br></pre></td></tr></table></figure><h3 id="查看-Caddy-运行状态"><a href="#查看-Caddy-运行状态" class="headerlink" title="查看 Caddy 运行状态"></a>查看 Caddy 运行状态</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status caddy</span><br></pre></td></tr></table></figure><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>确保你的域名（例如 <code>tz.dabo.im</code>）已正确解析到服务器 IP。</li><li>如果目标服务器不在本地（即不是 <code>127.0.0.1</code>），需要确保网络连通性。</li><li>检查防火墙设置，确保相关端口（如 80、443 或自定义端口）已开放。</li></ol><p>完成以上步骤后，Caddy2 将成功反向代理你的目标服务！</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
          <category> 反向代理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯IPv6的VPS使用Cloudflare Tunnel所需要的一些额外设置</title>
      <link href="/CF-Tun-IPv6/"/>
      <url>/CF-Tun-IPv6/</url>
      
        <content type="html"><![CDATA[<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>使用纯IPv6的VPS，如果使用官方的安装脚本，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb &amp;&amp; <span class="built_in">sudo</span> dpkg -i cloudflared.deb &amp;&amp; <span class="built_in">sudo</span> cloudflared service install &lt;令牌&gt;</span><br></pre></td></tr></table></figure><p>由于默认参数是IPv4的，因而安装完之后会卡在那边，这时候就需要做些小小的设置了（当然，如果在Tunnel之前套了Warp这里不会卡住，只不过Tunnel那边会显示降级）</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>安装卡住后直接按Ctrl+C退出，然后使用文本编辑器编辑这个文件</p><p><code>/etc/systemd/system/cloudflared.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/cloudflared.service</span><br></pre></td></tr></table></figure><p>修改这一行<code>ExecStart=/usr/bin/cloudflared --no-autoupdate tunnel run --token &lt;令牌&gt;</code>为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/cloudflared --no-autoupdate --edge-ip-version 6 tunnel run --token</span><br></pre></td></tr></table></figure><p>当然，这里还推荐加上<code>--protocol http2</code>这个参数，更稳定，完整如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/cloudflared --no-autoupdate --protocol http2 --edge-ip-version 6 tunnel run --token</span><br></pre></td></tr></table></figure><p>最后刷新重启下cloudflared服务即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart cloudflared</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alice free v6 基础教程及进阶玩法</title>
      <link href="/Alice/"/>
      <url>/Alice/</url>
      
        <content type="html"><![CDATA[<h2 id="基础玩法"><a href="#基础玩法" class="headerlink" title="基础玩法"></a><code>基础玩法</code></h2><h3 id="Alice-free-only-v6-设置简略"><a href="#Alice-free-only-v6-设置简略" class="headerlink" title="Alice free only v6 设置简略"></a>Alice free only v6 设置简略</h3><ol><li>CF解析v6地址，关闭小黄云（教程跳过）</li><li>SSH登录，安装官方v4出口（如已安装warp请卸载）</li><li>安装3xui，申请面板证书</li><li>登录3xui面板，搭建5个节点</li><li>设置出站规则</li><li>设置路由规则</li><li>保存并重启3xui面板</li></ol><h3 id="安装官方V4出口"><a href="#安装官方V4出口" class="headerlink" title="安装官方V4出口"></a>安装官方V4出口</h3><p>1、登录 <code>ssh</code>（跳过），输入下面命令安装，选择1-5都可以，随意</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/hkfires/DNS-Alice-Unlock/main/dns-alice-unlock.sh &amp;&amp; <span class="built_in">chmod</span> +x dns-alice-unlock.sh &amp;&amp; bash dns-alice-unlock.sh</span><br></pre></td></tr></table></figure><h3 id="2、安装-3xui，官方脚本安装，过程中都默认按回车就行-没有空机，有机会在补图，不会的搜索3xui安装教程"><a href="#2、安装-3xui，官方脚本安装，过程中都默认按回车就行-没有空机，有机会在补图，不会的搜索3xui安装教程" class="headerlink" title="2、安装 3xui，官方脚本安装，过程中都默认按回车就行 没有空机，有机会在补图，不会的搜索3xui安装教程"></a>2、安装 <code>3xui</code>，官方脚本安装，过程中都默认按回车就行 <code>没有空机，有机会在补图，不会的搜索3xui安装教程</code></h3><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751690694.621899.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Ls https://raw.githubusercontent.com/mhsanaei/3x-ui/master/install.sh)</span><br></pre></td></tr></table></figure><blockquote><p>2.1、<code>缺图</code>输入 <code>x-ui</code>进入控制面板，开启bbr</p></blockquote><blockquote><p>2.2、<code>缺图</code>返回主菜单，输入 <code>18</code>申请证书</p></blockquote><h3 id="3、登录3xui面板，搭建5个节点"><a href="#3、登录3xui面板，搭建5个节点" class="headerlink" title="3、登录3xui面板，搭建5个节点"></a>3、登录3xui面板，搭建5个节点</h3><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751690761.483203.png"></p><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751690793.332349.png"></p><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751690932.593451.png"></p><h3 id="4、Xray设置添加设置出站规则，这里采用官方的socks，对应设置5条规则"><a href="#4、Xray设置添加设置出站规则，这里采用官方的socks，对应设置5条规则" class="headerlink" title="4、Xray设置添加设置出站规则，这里采用官方的socks，对应设置5条规则"></a>4、<code>Xray设置</code>添加设置出站规则，这里采用官方的socks，对应设置5条规则</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sokcs5出口已更新优化</span><br><span class="line">IP： 2a14:67c0:116::1</span><br><span class="line">用户名 ：alice</span><br><span class="line">密码 ：alicefofo123..OVO</span><br><span class="line">端口 ：</span><br><span class="line">     10000 HK</span><br><span class="line">     10001 SG</span><br><span class="line">     20000 HKT</span><br><span class="line">     30000 Hinet -&gt; new</span><br><span class="line">     40000 VN</span><br><span class="line">     50000 Biglobe</span><br></pre></td></tr></table></figure><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751690970.492484.png"></p><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751690995.777867.png"></p><h3 id="5、设置路由规则，一个节点对应一条规则"><a href="#5、设置路由规则，一个节点对应一条规则" class="headerlink" title="5、设置路由规则，一个节点对应一条规则"></a>5、设置路由规则，一个节点对应一条规则</h3><p><a href="https://tc.889269.xyz/1751294340889_file_1751294340889.jpg"><img src="/"></a><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751691022.131789.png"></p><h3 id="6、导出节点到V2rayN测试"><a href="#6、导出节点到V2rayN测试" class="headerlink" title="6、导出节点到V2rayN测试"></a>6、导出节点到V2rayN测试</h3><p><img src="https://tc.889269.xyz/1751295716880_file_1751295716880.jpg"><img src="https://tc.889269.xyz/1751295915033_file_1751295915033.jpg"></p><h3 id="7、启用节点，查询落地"><a href="#7、启用节点，查询落地" class="headerlink" title="7、启用节点，查询落地"></a>7、启用节点，<a href="https://ip.sb/">查询落地</a></h3><p><img src="https://tc.889269.xyz/1751296181669_file_1751296181669.jpg"></p><p><code>到这里就是直连5落地的方法，根据个人测速直连效果不佳，效果图就不上了，自己测速，推荐下面的进阶玩法。</code></p><h2 id="中转玩法"><a href="#中转玩法" class="headerlink" title="中转玩法"></a><code>中转玩法</code></h2><h3 id="GCP香港（需要开ipv6）-中转机-设置简略"><a href="#GCP香港（需要开ipv6）-中转机-设置简略" class="headerlink" title="GCP香港（需要开ipv6） 中转机 设置简略"></a>GCP香港（需要开ipv6） 中转机 设置简略</h3><ol><li>安装3xui</li><li>添加任意门</li><li>手搓节点</li></ol><h3 id="1、跳过安装3xui（和上面步骤一样，不会的重复上面的第2步）"><a href="#1、跳过安装3xui（和上面步骤一样，不会的重复上面的第2步）" class="headerlink" title="1、跳过安装3xui（和上面步骤一样，不会的重复上面的第2步）"></a>1、<code>跳过</code>安装3xui（和上面步骤一样，不会的重复上面的第2步）</h3><h3 id="2、登录3xui面板，添加任意门协议"><a href="#2、登录3xui面板，添加任意门协议" class="headerlink" title="2、登录3xui面板，添加任意门协议"></a>2、登录3xui面板，添加任意门协议</h3><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751691041.3544.png"></p><h3 id="3、手搓节点"><a href="#3、手搓节点" class="headerlink" title="3、手搓节点"></a>3、手搓节点</h3><ul><li>只需要将直连节点右键编辑修改 <code>地址</code>和 <code>端口</code>两个地方就可以了</li><li>全部直连节点都需要按上面的修改，<code>地址</code>是固定的，<code>端口</code>是door协议对应的</li></ul><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751691070.772677.png"></p><h3 id="4、中转后效果"><a href="#4、中转后效果" class="headerlink" title="4、中转后效果"></a>4、中转后效果</h3><p><img src="https://tc.889269.xyz/1751298878000_file_1751298878000.jpg"></p><h2 id="CF回源"><a href="#CF回源" class="headerlink" title="CF回源"></a>CF回源</h2><h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h3><p><code>alice v6 解析到CF，并打开小黄云。（教程中就跳过，基本都会）</code></p><h3 id="1、3xui节点搭建，这次只需要搭建一个1个节点-按照图片提示操作"><a href="#1、3xui节点搭建，这次只需要搭建一个1个节点-按照图片提示操作" class="headerlink" title="1、3xui节点搭建，这次只需要搭建一个1个节点,按照图片提示操作"></a>1、3xui节点搭建，这次只需要搭建一个1个节点,按照图片提示操作</h3><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751691092.324772.png"></p><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751691142.843719.png"></p><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751691166.632174.png"></p><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751691184.32333.png">](h</p><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751691205.63152.png"></p><h3 id="2、添加路由规则，提醒：添加完成一定要-保存、并重启面板。"><a href="#2、添加路由规则，提醒：添加完成一定要-保存、并重启面板。" class="headerlink" title="2、添加路由规则，提醒：添加完成一定要 保存、并重启面板。"></a>2、添加路由规则，提醒：添加完成一定要 <code>保存、并重启面板</code>。</h3><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751691225.508459.png"></p><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751691245.528599.png"></p><h3 id="3、登录CF，设置回源，这里先检查这几项设置，确认无误再开始"><a href="#3、登录CF，设置回源，这里先检查这几项设置，确认无误再开始" class="headerlink" title="3、登录CF，设置回源，这里先检查这几项设置，确认无误再开始"></a>3、登录CF，设置回源，这里先检查这几项设置，确认无误再开始</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. SSL/TLS 加密模式 ：完全</span><br><span class="line">2. SSL/TLS ---&gt; 边缘证书</span><br><span class="line">   关闭：始终使用 HTTPS 和 自动 HTTPS 重写  </span><br></pre></td></tr></table></figure><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751691281.468771.png"></p><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751691305.852393.png"></p><h3 id="4、到了这里，设置部分也全部完成，只剩最后的-手搓节点-返回3xui把节点都复制到-V2rayN优化"><a href="#4、到了这里，设置部分也全部完成，只剩最后的-手搓节点-返回3xui把节点都复制到-V2rayN优化" class="headerlink" title="4、到了这里，设置部分也全部完成，只剩最后的 手搓节点,返回3xui把节点都复制到 V2rayN优化"></a>4、到了这里，设置部分也全部完成，只剩最后的 <code>手搓节点</code>,返回3xui把节点都复制到 <code>V2rayN</code>优化</h3><p><img src="https://img.887178.xyz/Qexo/Alice/Alice-2025-07-1751691328.920379.png"></p><h3 id="5、上结果，有图有真相，效果不明显的更换优选IP，用这个「工具」自己去刷IP替换优选"><a href="#5、上结果，有图有真相，效果不明显的更换优选IP，用这个「工具」自己去刷IP替换优选" class="headerlink" title="5、上结果，有图有真相，效果不明显的更换优选IP，用这个「工具」自己去刷IP替换优选"></a>5、上结果，<code>有图有真相</code>，效果不明显的更换优选IP，用这个「<a href="https://github.com/XIU2/CloudflareSpeedTest">工具</a>」自己去刷IP替换优选</h3><p><img src="https://tc.889269.xyz/1751520325067_file_1751520325067.jpg"></p><h3 id="6、最后说明：我的网速不等于你的网速，优选IP因地而异，不合适就多刷刷，总有一个合适的！"><a href="#6、最后说明：我的网速不等于你的网速，优选IP因地而异，不合适就多刷刷，总有一个合适的！" class="headerlink" title="6、最后说明：我的网速不等于你的网速，优选IP因地而异，不合适就多刷刷，总有一个合适的！"></a>6、<code>最后说明</code>：我的网速不等于你的网速，优选IP因地而异，不合适就多刷刷，总有一个合适的！</h3><h2 id="所以操作就是这么简单。效果就是这么丝滑！具体自测。"><a href="#所以操作就是这么简单。效果就是这么丝滑！具体自测。" class="headerlink" title="所以操作就是这么简单。效果就是这么丝滑！具体自测。"></a>所以操作就是这么简单。效果就是这么丝滑！具体自测。</h2>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github代码空间部署免费的RDP服务器</title>
      <link href="/winSDB/"/>
      <url>/winSDB/</url>
      
        <content type="html"><![CDATA[<p>项目地址：<a href="https://hub.docker.com/r/dockurr/windows">dockurr&#x2F;windows</a></p><p><strong>命令</strong></p><p>切换为超级管理员（root用户）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p>刷新软件仓库的列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>安装Docker引擎和工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker.io docker-compose</span><br></pre></td></tr></table></figure><p>创建名为dockercom的文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir dockercom</span><br></pre></td></tr></table></figure><p>进入刚创建的dockercom目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd dockercom</span><br></pre></td></tr></table></figure><p>创建并编辑文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nano windows10.yml</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">  windows:</span><br><span class="line">    image: dockurr/windows</span><br><span class="line">    container_name: windows</span><br><span class="line">    environment:</span><br><span class="line">      VERSION: <span class="string">&quot;10l&quot;</span></span><br><span class="line">      USERNAME: <span class="string">&quot;apepine&quot;</span></span><br><span class="line">      PASSWORD: <span class="string">&quot;apepine123&quot;</span></span><br><span class="line">      RAM_SIZE: <span class="string">&quot;4G&quot;</span></span><br><span class="line">      CPU_CORES: <span class="string">&quot;4&quot;</span></span><br><span class="line">      DISK_SIZE: <span class="string">&quot;400G&quot;</span></span><br><span class="line">      DISK2_SIZE: <span class="string">&quot;100G&quot;</span></span><br><span class="line">      LANGUAGE: <span class="string">&quot;Chinese&quot;</span></span><br><span class="line">      REGION: <span class="string">&quot;zh_CN&quot;</span>     </span><br><span class="line">      KEYBOARD: <span class="string">&quot;cn&quot;</span>     </span><br><span class="line"></span><br><span class="line">    devices:</span><br><span class="line">      - /dev/kvm</span><br><span class="line">      - /dev/net/tun</span><br><span class="line">    cap_add:</span><br><span class="line">      - NET_ADMIN</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8006:8006&quot;</span></span><br><span class="line">      - <span class="string">&quot;3389:3389/tcp&quot;</span></span><br><span class="line">      - <span class="string">&quot;3389:3389/udp&quot;</span></span><br><span class="line">    stop_grace_period: 2m</span><br></pre></td></tr></table></figure><p>根据YAML文件启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker-compose -f windows10.yml up</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GitHub拉取同步操作</title>
      <link href="/GitHub/"/>
      <url>/GitHub/</url>
      
        <content type="html"><![CDATA[<h2 id="旧电脑上的操作步骤"><a href="#旧电脑上的操作步骤" class="headerlink" title="旧电脑上的操作步骤"></a>旧电脑上的操作步骤</h2><h3 id="步骤一：准备要上传到-GitHub-的文件"><a href="#步骤一：准备要上传到-GitHub-的文件" class="headerlink" title="步骤一：准备要上传到 GitHub 的文件"></a>步骤一：准备要上传到 GitHub 的文件</h3><ol><li><p>克隆仓库：下载仓库的 hexo 默认分支文件，记得将 <code>username</code> 替换为你自己的 GitHub 用户名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:username/username.github.io.git</span><br></pre></td></tr></table></figure><p>打包文件：进入克隆的文件夹，保留 <code>.git</code> 文件夹，删除其他文件。</p></li><li><p>整理文件：找到之前的 hexo 文件夹，将其中 <code>.deploy_git</code> 文件夹外的所有内容复制到克隆的文件夹中。</p></li><li><p><strong>设置 .gitignore 文件</strong>：确认克隆文件夹内有 <code>.gitignore</code> 文件，它用于忽略一些不需要的文件类型（若没有，需手动创建）。内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure></li><li><p>检查主题文件夹：如果已克隆主题文件夹，需要删除 <code>.git</code> 文件，因为 Git 不能嵌套版本控制。确保显示隐藏文件，避免上传出错，影响配置同步。</p></li></ol><h3 id="步骤二：将修改后的文件推送到远程仓库"><a href="#步骤二：将修改后的文件推送到远程仓库" class="headerlink" title="步骤二：将修改后的文件推送到远程仓库"></a>步骤二：将修改后的文件推送到远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;add_branch&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>此时，您已将完整的站点推送到远程仓库的 hexo 默认分支。</p><h2 id="新电脑上的操作步骤"><a href="#新电脑上的操作步骤" class="headerlink" title="新电脑上的操作步骤"></a>新电脑上的操作步骤</h2><ol><li><p><strong>配置 SSH 密钥</strong>：在新电脑上生成并添加 SSH 密钥到 GitHub 账户上。教程可以参考此视频：<a href="https://youtu.be/64IUtZsvbCE%E3%80%82">https://youtu.be/64IUtZsvbCE。</a></p></li><li><p><strong>克隆仓库</strong>：创建一个文件夹（假设命名为 A），在 A 文件夹内打开终端，并执行以下命令（替换 <code>username</code> 为你的 GitHub 用户名）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:username/username.github.io.git --depth=1</span><br></pre></td></tr></table></figure></li><li><p><strong>安装 Hexo 环境</strong>：进入 <code>username.github.io</code> 文件夹并运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure></li></ol><p>至此，您可以在新电脑上开始编辑和发布文章了。</p><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>当您在旧电脑和新电脑上交替使用时，注意保持同步：</p><ul><li><p><strong>旧电脑（甲）</strong>：在“甲”电脑上完成文章更新后，记得运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;add_branch&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>这样 GitHub 上将拥有最新版本的文件。</p></li><li><p><strong>新电脑（乙）</strong>：下午在“乙”电脑上继续编辑时，先执行以下命令以同步最新文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>检查文件和预览是否是最新版本，确认无误后继续撰写。如果有问题，按照“第二部分”的操作重新进行同步。</p></li></ul><blockquote><p><strong>注意</strong>：如果一台电脑长时间未使用，可能会导致同步失效，建议按照“第二部分”的步骤重新操作。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>alpine系统搭建hy2节点</title>
      <link href="/hy2/"/>
      <url>/hy2/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>更新系统</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk update &amp;&amp; apk upgrade</span><br></pre></td></tr></table></figure><ul><li><strong>查看ip</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl ifconfig.me</span><br></pre></td></tr></table></figure><ul><li><strong>alpine中安装hysteria2</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O hy2.sh https://raw.githubusercontent.com/zrlhk/alpine-hysteria2/main/hy2.sh  &amp;&amp; sh hy2.sh</span><br></pre></td></tr></table></figure><p>打开V2rayN，选择服务器，选择添加hy2服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">别名：随便</span><br><span class="line">地址：2a01:4f9:6b:47e9::345       ipv6</span><br><span class="line">端口：40443                       去配置文件：/etc/hysteria/config.yaml 查看</span><br><span class="line">密码：5PK35VON4/KM64bxw8cEXtkt    去配置文件：/etc/hysteria/config.yaml 查看</span><br><span class="line">混淆密码：空</span><br><span class="line">跳跃端口范围   空</span><br><span class="line"></span><br><span class="line">传输层安全  tls</span><br><span class="line">SNI    bing.com</span><br><span class="line">跳过证书验证   true      其他默认</span><br></pre></td></tr></table></figure><ul><li><strong>卸载Hysteria2</strong></li></ul><ol><li><strong>停止运行中的hy2服务</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rc-service hysteria stop</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>禁用开机自启动</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rc-update del hysteria</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>删除hy2服务文件</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /etc/init.d/hysteria</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>删除hy2配置文件</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /etc/hysteria/</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>确认卸载完成</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep hysteria</span><br></pre></td></tr></table></figure><p>如果**仅显示 <code>grep hysteria</code>**，则表明系统中已无 Hysteria2 进程，卸载成功。</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
          <category> 节点搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 节点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSSH搭建教程</title>
      <link href="/webssh/"/>
      <url>/webssh/</url>
      
        <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><ul><li> <strong>Python环境安装</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade -y</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">系统</th><th align="center">安装Python 2</th><th>安装Python 3</th><th>安装pip(Python 2)</th><th align="center">安装pip3(Python 3)</th></tr></thead><tbody><tr><td align="center">Debian&#x2F;Ubuntu</td><td align="center">apt install python</td><td>apt install python3</td><td>apt install python-pip</td><td align="center">apt install python3-pip</td></tr><tr><td align="center">CentOS 7</td><td align="center">yum install python</td><td>自带 Python 2.7，可选升级 Python 3：yum install python3</td><td>yum install python2-pip</td><td align="center">yum install python3-pip</td></tr><tr><td align="center">CentOS 8&#x2F;Stream</td><td align="center">dnf install python2</td><td>dnf install python3</td><td>dnf install python2-pip</td><td align="center">dnf install python3-pip</td></tr></tbody></table><h1 id="二、安装工作"><a href="#二、安装工作" class="headerlink" title="二、安装工作"></a>二、安装工作</h1><p><a href="https://github.com/he-zhenpeng/webssh">webssh仓库地址</a></p><ol><li>下载webssh安装包命令：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/amclubs/webssh</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>绑定Cloudflare域名生成证书</strong>，并上传到服务器指定目录。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd websssh</span><br></pre></td></tr></table></figure><ol start="3"><li>安装webssh命令：</li></ol><p><strong>Python2</strong> 安装webssh命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install webssh</span><br></pre></td></tr></table></figure><p><strong>Python3</strong> 安装webssh命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install webssh</span><br></pre></td></tr></table></figure><ol start="4"><li>运行webssh命令 **(certfile&#x2F;keyfile证书目录换成你服务器存储的目录和文件名称)**：</li></ol><p><strong>Python2</strong> 运行webssh命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup python run.py --certfile=&#x27;/root/cert/809098.pem&#x27; --keyfile=&#x27;/root/cert/809098.key&#x27; --sslport=8443 &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p><strong>Python3</strong> 运行webssh命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup python3 run.py --certfile=&#x27;/root/cert/809098.pem&#x27; --keyfile=&#x27;/root/cert/809098.key&#x27; --sslport=8443 &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><ol start="5"><li>访问webssh：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://域名:端口</span><br></pre></td></tr></table></figure><h1 id="三、设置开机自动启动webssh"><a href="#三、设置开机自动启动webssh" class="headerlink" title="三、设置开机自动启动webssh"></a>三、设置开机自动启动webssh</h1><p><strong>WorkingDirectory&#x2F;certfile&#x2F;keyfile证书目录换成你服务器存储的目录和文件名称</strong></p><ol><li>写一个 service 文件 webssh.service</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/webssh.service</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=WebSSH Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">WorkingDirectory=/root/webssh</span><br><span class="line">ExecStart=/usr/bin/python3 run.py --certfile=&#x27;/root/cert/809098.pem&#x27; --keyfile=&#x27;/root/cert/809098.key&#x27; --sslport=8443</span><br><span class="line">Restart=always</span><br><span class="line">User=root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ol start="2"><li>让服务生效</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable webssh</span><br><span class="line">systemctl start webssh</span><br></pre></td></tr></table></figure><ol start="3"><li>管理服务</li></ol><p>查看状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status webssh  </span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart webssh</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop webssh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> webssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署哪吒 v1-Argo 版</title>
      <link href="/nezha-argo/"/>
      <url>/nezha-argo/</url>
      
        <content type="html"><![CDATA[<h2 id="1-项目介绍"><a href="#1-项目介绍" class="headerlink" title="1. 项目介绍"></a>1. 项目介绍</h2><p><strong>项目作者</strong>：老王<br><strong>GitHub 仓库</strong>：<a href="https://github.com/eooce/node-ws">argo-nezha-v1</a></p><p>本项目是基于 <strong>Node.js</strong> 的 <strong>ws</strong> 库，集成了 <strong>哪吒面板</strong>，并通过 <strong>Cloudflare Tunnel</strong> 提供安全访问。它适用于 <strong>Node 环境的玩具和容器</strong>，支持自动备份到 GitHub 仓库，并且提供一键部署功能。</p><hr><h2 id="2-部署前置准备"><a href="#2-部署前置准备" class="headerlink" title="2. 部署前置准备"></a>2. 部署前置准备</h2><h3 id="必须事项："><a href="#必须事项：" class="headerlink" title="必须事项："></a>必须事项：</h3><ol><li><p><strong>CloudFlare 设置：</strong></p><ul><li>开启 <strong>GRPC 流量代理</strong>。</li><li>设置 <strong>Tunnel Public Hostname</strong>：<ul><li>类型：<strong>HTTPS</strong></li><li>URL：<code>localhost:443</code></li><li><strong>TLS 设置</strong>：<ul><li>不验证 TLS：开启</li><li>HTTP2 连接：开启</li></ul></li></ul></li><li>记录 <strong>argo 域名</strong> 和 <strong>Token</strong>，备用。</li></ul></li><li><p><strong>GitHub Apps 设置（可选）：</strong></p><ul><li>访问 GitHub 开发者设置 <a href="https://github.com/settings/developers">GitHub Apps</a>。</li><li>新建 OAuth 应用：<ul><li><strong>Application name</strong>：nezha_v1</li><li><strong>Homepage URL</strong>：用于哪吒面板的 <strong>argo</strong> 域名</li><li><strong>Authorization callback URL</strong>：<code>https://用于哪吒面板的argo域名/api/v1/oauth2/callback</code></li></ul></li><li>记录 <strong>Client ID</strong> 和 <strong>Client secrets</strong>，备用。</li></ul></li></ol><h3 id="可选事项："><a href="#可选事项：" class="headerlink" title="可选事项："></a>可选事项：</h3><ul><li>如果希望备份数据到 GitHub 私有仓库，需要设置 <strong>GitHub Token</strong> 和 <strong>GitHub 仓库信息</strong>。</li></ul><hr><h2 id="3-快速部署"><a href="#3-快速部署" class="headerlink" title="3. 快速部署"></a>3. 快速部署</h2><h3 id="VPS-平台一键部署"><a href="#VPS-平台一键部署" class="headerlink" title="VPS 平台一键部署"></a>VPS 平台一键部署</h3><ol><li><p>执行以下一键脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sSL https://raw.githubusercontent.com/yutian81/argo-nezha-v1/github/nezhav1.sh)</span><br></pre></td></tr></table></figure></li><li><p>按提示输入以下变量：</p><ul><li><strong>GITHUB_TOKEN</strong>：GitHub 的访问令牌。</li><li><strong>GITHUB_REPO_OWNER</strong>：GitHub 用户名。</li><li><strong>GITHUB_REPO_NAME</strong>：用于备份的 GitHub 仓库名。</li><li><strong>BACKUP_BRANCH</strong>：用于备份的 GitHub 仓库分支。</li><li><strong>ARGO_AUTH</strong>：Cloudflare Argo Tunnel 令牌（JSON 格式的密钥必须用英文单引号包裹）。</li><li><strong>ARGO_DOMAIN</strong>：在 Argo 中设置的哪吒面板域名。</li></ul></li><li><p>访问面板：</p><ul><li>网址：<code>https://你在argo隧道中设置的面板域名</code></li><li>初始用户名&#x2F;密码：<code>admin/admin</code></li></ul></li></ol><hr><h2 id="4-手动部署"><a href="#4-手动部署" class="headerlink" title="4. 手动部署"></a>4. 手动部署</h2><ol><li><p>克隆仓库并进入目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone -b github --depth 1 https://ghproxy.net/https://github.com/yutian81/argo-nezha-v1.git</span><br><span class="line">cd argo-nezha-v1</span><br></pre></td></tr></table></figure></li><li><p>拉取镜像并启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker compose pull</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure></li><li><p>配置文件：</p><ul><li><p>在 <code>/root/argo-nezha-v1/.env</code> 文件中填入变量值。</p></li><li><p>如果需要手动更新，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd argo-nezha-v1</span><br><span class="line">docker compose pull &amp;&amp; docker compose up -d</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h2 id="5-PaaS-平台部署"><a href="#5-PaaS-平台部署" class="headerlink" title="5. PaaS 平台部署"></a>5. PaaS 平台部署</h2><ol><li><p>拉取 Docker 镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull yutian81/argo-nezha-v1:latest</span><br></pre></td></tr></table></figure></li><li><p>设置必要变量，与 VPS 部署相同。</p></li><li><p>配置平台，暴露 443 端口。</p></li></ol><hr><h2 id="6-自动更新"><a href="#6-自动更新" class="headerlink" title="6. 自动更新"></a>6. 自动更新</h2><ol><li><p>手动更新：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd argo-nezha-v1 &amp;&amp; docker compose pull &amp;&amp; docker compose up -d</span><br></pre></td></tr></table></figure></li><li><p>自动更新：加入系统 <strong>cron</strong> 任务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(crontab -l 2&gt;/dev/null | grep -v &quot;argo-nezha-v1&quot;; echo &quot;0 3 * * * cd /root/argo-nezha-v1 &amp;&amp; /usr/bin/docker compose pull &amp;&amp; /usr/bin/docker compose up -d &gt;&gt; /var/log/nezha_update.log 2&gt;&amp;1&quot;) | crontab -</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="7-备份与恢复"><a href="#7-备份与恢复" class="headerlink" title="7. 备份与恢复"></a>7. 备份与恢复</h2><ul><li><strong>自动备份</strong>：项目支持自动备份到 GitHub 私有仓库。</li><li><strong>备份脚本</strong>：<code>/backup.sh</code> 每天凌晨 2 点执行备份。</li></ul><p><strong>手动备份：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd argo-nezha-v1 &amp;&amp; chmod +x backup.sh &amp;&amp; ./backup.sh backup</span><br><span class="line">或</span><br><span class="line">docker exec -it argo-nezha-v1 /backup.sh backup</span><br></pre></td></tr></table></figure><p><strong>手动恢复：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在vps终端执行</span><br><span class="line">cd argo-nezha-v1 &amp;&amp; chmod +x backup.sh &amp;&amp; ./backup.sh restore</span><br><span class="line"># 在docker内执行</span><br><span class="line">docker exec -it argo-nezha-v1 /backup.sh restore</span><br></pre></td></tr></table></figure><h2 id="8-基础设置"><a href="#8-基础设置" class="headerlink" title="8. 基础设置"></a>8. 基础设置</h2><h3 id="8-1-Agent-设置"><a href="#8-1-Agent-设置" class="headerlink" title="8.1 Agent 设置"></a>8.1 Agent 设置</h3><ul><li><strong>Agent 对接地址</strong>：面板域名:443</li><li><strong>Agent 使用 TLS 连接</strong>：打勾</li><li><strong>前端真实 IP 请求头</strong>：<code>nz-realip</code>（不要填写 <code>CF-Connecting-lP</code>）</li></ul><h3 id="8-2-绑定-GitHub-登录"><a href="#8-2-绑定-GitHub-登录" class="headerlink" title="8.2 绑定 GitHub 登录"></a>8.2 绑定 GitHub 登录</h3><ol><li>修改 <code>/root/argo-nezha-v1/dashboard/config.yaml</code> 文件，加入 GitHub OAuth 配置：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">oauth2:</span><br><span class="line">  GitHub:</span><br><span class="line">    client_id: 你的 GitHub Client ID</span><br><span class="line">    client_secret: 你的 GitHub Client Secret</span><br><span class="line">    endpoint:</span><br><span class="line">      auth_url: https://github.com/login/oauth/authorize</span><br><span class="line">      token_url: https://github.com/login/oauth/access_token</span><br><span class="line">    user_id_path: id</span><br><span class="line">    user_info_url: https://api.github.com/user</span><br></pre></td></tr></table></figure><h3 id="8-3-禁止密码登录"><a href="#8-3-禁止密码登录" class="headerlink" title="8.3 禁止密码登录"></a>8.3 禁止密码登录</h3><ol><li>登录哪吒管理后台，进入个人设置，开启 <strong>OAuth2 绑定</strong>。</li></ol><h3 id="8-4-设置前端界面背景图"><a href="#8-4-设置前端界面背景图" class="headerlink" title="8.4 设置前端界面背景图"></a>8.4 设置前端界面背景图</h3><ol><li>进入 <strong>系统设置</strong> → <strong>自定义代码</strong>，输入以下代码：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    window.CustomBackgroundImage = &quot;背景图直链&quot;;</span><br><span class="line">    window.CustomDesc = &quot;VPS 探针&quot;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="8-5-设置-Telegram-通知"><a href="#8-5-设置-Telegram-通知" class="headerlink" title="8.5 设置 Telegram 通知"></a>8.5 设置 Telegram 通知</h3><ul><li><p>进入 <strong>系统设置</strong> → <strong>通知</strong>，点击 **+**创建通知。配置 <strong>URL</strong> 为以下格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.telegram.org/bot&lt;tg token&gt;/sendMessage?chat_id=&lt;tg id&gt;&amp;text=#NEZHA#</span><br></pre></td></tr></table></figure></li><li><p>请替换 <code>&lt;tg token&gt;</code> 和 <code>&lt;tg id&gt;</code> 为你自己的 Telegram Bot Token 和 Chat ID。</p></li></ul><p><strong>设置警报规则</strong></p><ul><li><p>在 <strong>警报规则</strong> 中，点击 **+**创建规则。</p></li><li><p>选择 <strong>离线警报</strong>，并根据需要配置规则，指定警报触发条件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;type&quot;:&quot;offline&quot;,&quot;duration&quot;:180,&quot;cover&quot;:0&#125;]</span><br></pre></td></tr></table></figure><p>这样就完成了 Telegram 通知和警报规则的设置。</p></li><li><p>其他警报规则请看官方文档</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 哪吒面板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哪吒面板 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青龙面板依赖</title>
      <link href="/qinglong-independence/"/>
      <url>/qinglong-independence/</url>
      
        <content type="html"><![CDATA[<h2 id="青龙依赖"><a href="#青龙依赖" class="headerlink" title="青龙依赖"></a>青龙依赖</h2><h3 id="NodeJs-依赖"><a href="#NodeJs-依赖" class="headerlink" title="NodeJs 依赖"></a>NodeJs 依赖</h3><p>以下是青龙在 NodeJs 环境中的依赖列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">axios</span><br><span class="line">request</span><br><span class="line">canvas</span><br><span class="line">cheerio</span><br><span class="line">js-base64</span><br><span class="line">dotenv</span><br><span class="line">magic</span><br><span class="line">tough-cookie</span><br><span class="line">ws@7.4.3</span><br><span class="line">require</span><br><span class="line">requests</span><br><span class="line">date-fns</span><br><span class="line">ts-md5</span><br><span class="line">typescript</span><br><span class="line">json5</span><br><span class="line">axios@v0.27.2</span><br><span class="line">crypto-js</span><br><span class="line">@types/node</span><br><span class="line">png-js</span><br><span class="line">node-telegram-bot-api</span><br><span class="line">fs</span><br><span class="line">jsdom</span><br><span class="line">form-data</span><br><span class="line">jieba</span><br><span class="line">tslib</span><br><span class="line">ds</span><br><span class="line">jsdom -g</span><br><span class="line">prettytable</span><br><span class="line">ql</span><br><span class="line">common</span><br><span class="line">node-jsencrypt</span><br><span class="line">juejin-helper</span><br><span class="line">moment</span><br><span class="line">global-agent</span><br></pre></td></tr></table></figure><h3 id="Python3-依赖"><a href="#Python3-依赖" class="headerlink" title="Python3 依赖"></a>Python3 依赖</h3><p>以下是青龙在 Python3 环境中的依赖列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rsa</span><br><span class="line">bs4</span><br><span class="line">telethon</span><br><span class="line">cacheout</span><br><span class="line">jieba</span><br><span class="line">PyExecJS</span><br><span class="line">ping3</span><br><span class="line">canvas</span><br><span class="line">Crypto</span><br><span class="line">ds</span><br><span class="line">requests</span><br><span class="line">pycryptodome</span><br></pre></td></tr></table></figure><h3 id="Linux-依赖"><a href="#Linux-依赖" class="headerlink" title="Linux 依赖"></a>Linux 依赖</h3><p>以下是青龙在 Linux 环境中的依赖列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bizCode</span><br><span class="line">bizMsg  </span><br><span class="line">lxml</span><br><span class="line">libc-dev</span><br><span class="line">gcc</span><br><span class="line">g++</span><br><span class="line">libffi-dev</span><br><span class="line">python3-dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 青龙面板 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-ws部署教程</title>
      <link href="/node-ws/"/>
      <url>/node-ws/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p><strong>项目作者</strong>：老王<br><strong>GitHub仓库项目地址</strong>：<a href="https://github.com/eooce/node-ws">node-ws</a><br>本项目适用于 Node 环境的玩具和容器，基于 Node 第三方的 <code>ws</code> 库，集成了哪吒探针服务，并支持自行添加环境变量。</p><h3 id="PaaS-平台设置的环境变量"><a href="#PaaS-平台设置的环境变量" class="headerlink" title="PaaS 平台设置的环境变量"></a>PaaS 平台设置的环境变量</h3><table><thead><tr><th>变量名</th><th>是否必须</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>UUID</td><td>否</td><td>de04add9-5c68-6bab-950c-08cd5320df33</td><td>开启了哪吒 v1, 请修改 UUID</td></tr><tr><td>PORT</td><td>否</td><td>3000</td><td>监听端口</td></tr><tr><td>NEZHA_SERVER</td><td>否</td><td></td><td>哪吒 v1 填写形式：nz.abc.com:8008，哪吒 v0 填写形式：nz.abc.com</td></tr><tr><td>NEZHA_PORT</td><td>否</td><td></td><td>哪吒 v1 没有此变量，v0 的 agent 端口</td></tr><tr><td>NEZHA_KEY</td><td>否</td><td></td><td>哪吒 v1 的 NZ_CLIENT_SECRET 或 v0 的 agent 端口</td></tr><tr><td>NAME</td><td>否</td><td></td><td>节点名称前缀，例如：Glitch</td></tr><tr><td>DOMAIN</td><td>是</td><td></td><td>项目分配的域名或已反代的域名，不包括 https:&#x2F;&#x2F; 前缀</td></tr><tr><td>SUB_PATH</td><td>否</td><td>sub</td><td>订阅路径</td></tr><tr><td>AUTO_ACCESS</td><td>否</td><td>false</td><td>是否开启自动访问保活, false 为关闭, true 为开启, 需同时填写 DOMAIN 变量</td></tr></tbody></table><p><strong>域名&#x2F;sub</strong> 查看节点信息，也是订阅地址，包含 https:&#x2F;&#x2F; 或 http:&#x2F;&#x2F; 前缀，非标端口，域名:端口&#x2F;sub。</p><p><strong>温馨提示</strong>：README.md 为说明文件，请不要上传。</p><p><strong>JS 混淆地址</strong>：<a href="https://obfuscator.io/">obfuscator.io</a></p><h2 id="部署教程"><a href="#部署教程" class="headerlink" title="部署教程"></a>部署教程</h2><p>以大家口中的“越南鸡”（DataOnline）为例，下面是详细的部署步骤：</p><h3 id="1-打开老王-Node-ws-项目地址，下载-index-js-和-package-json-到本地"><a href="#1-打开老王-Node-ws-项目地址，下载-index-js-和-package-json-到本地" class="headerlink" title="1. 打开老王 Node-ws 项目地址，下载 index.js 和 package.json 到本地"></a>1. 打开老王 Node-ws 项目地址，下载 <code>index.js</code> 和 <code>package.json</code> 到本地</h3><h3 id="2-注册-DataOnline-账号"><a href="#2-注册-DataOnline-账号" class="headerlink" title="2. 注册 DataOnline 账号"></a>2. 注册 DataOnline 账号</h3><p>（因大家基本上都注册过了，这里一笔带过）</p><ol><li>进入 DataOnline 官网</li><li>邮箱获取验证码认证后，点击产品选购，选择右下角廉价主机，点击 <strong>Select</strong></li><li>选择免费的服务，添加域名，点击 <strong>订购</strong></li><li><strong>Dashboard ➡ 选择你的服务 ➡ Access Control Panel ➡ Click here to access Control Panel</strong></li></ol><h3 id="3-在-CloudFlare-托管的域名中添加一个-A-记录"><a href="#3-在-CloudFlare-托管的域名中添加一个-A-记录" class="headerlink" title="3. 在 CloudFlare 托管的域名中添加一个 A 记录"></a>3. 在 CloudFlare 托管的域名中添加一个 A 记录</h3><ol><li>将 IPV4 地址填写为 <code>103.137.185.66</code>，并开启小黄云</li><li>然后回到 DataOnline，进入管理页面，账号管理 ➡ 域名设置 ➡ 新增，填入刚才解析的域名（下面所有填写的域名都是这个域名）</li></ol><h3 id="4-上传文件到服务器"><a href="#4-上传文件到服务器" class="headerlink" title="4. 上传文件到服务器"></a>4. 上传文件到服务器</h3><ol><li><strong>系统信息和文件 ➡ 文件管理器</strong></li><li>进入 <code>domains/你的域名/public_html</code> 目录，将文件上传到当前目录</li></ol><h3 id="5-配置并运行-Node-js-应用"><a href="#5-配置并运行-Node-js-应用" class="headerlink" title="5. 配置并运行 Node.js 应用"></a>5. 配置并运行 Node.js 应用</h3><ol><li>在 DataOnline 管理后台，点击 <strong>附加功能 ➡ Setup Node.js App ➡ CREATE APPLICATION</strong></li><li>创建新的程序，选择 <strong>Run NPM Install ➡ Run JS script</strong></li><li><strong>Node.js version</strong> 选择 <code>22.14.0</code></li><li><strong>Application root</strong> 填写 <code>domains/你的域名/public_html</code></li><li><strong>Application startup file</strong> 填写 <code>index.js</code></li></ol><h3 id="6-在浏览器打开并查看节点信息"><a href="#6-在浏览器打开并查看节点信息" class="headerlink" title="6. 在浏览器打开并查看节点信息"></a>6. 在浏览器打开并查看节点信息</h3><ol><li>访问 <code>https://你的域名/sub</code> 查看节点信息</li></ol><h3 id="7-删除程序"><a href="#7-删除程序" class="headerlink" title="7. 删除程序"></a>7. 删除程序</h3><ol><li>进入系统信息和文件 ➡ 终端，输入 <code>kill -9 -1</code> 终止所有进程</li><li>进入 <strong>附加功能 ➡ Setup Node.js App</strong>，点击删除按钮</li><li>进入账号管理 ➡ 域名设置，勾选域名，点击右上角删除（勾选删除 Web 数据）</li><li>最好等待 2-3 分钟再重建，删除后需要等待一段时间释放端口，否则会提示端口被占用</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>可在网页终端输入 <code>ps aux</code> 检查 node.js 进程是否正常运行</li><li>运行 <code>index.js</code> 文件耗时可能较长，请耐心等待</li><li>若长时间无响应，可先打开 <code>https://你的域名/sub</code> 检查节点信息是否生成</li><li>若节点信息已生成，哪吒面板已上线，则无需理会响应</li><li>若节点信息未生成，或哪吒面板未上线，请删除程序重新部署</li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 哪吒面板 </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决哪吒面板删除服务器后 ID 不连续</title>
      <link href="/nezha-id/"/>
      <url>/nezha-id/</url>
      
        <content type="html"><![CDATA[<h2 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h2><p>本来以为哪吒面板删除服务器后会自动对其进行重新排序，结果确实会1，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err == nil &#123;</span><br><span class="line">    // 删除服务器</span><br><span class="line">    singleton.ServerLock.Lock()</span><br><span class="line">    onServerDelete(<span class="built_in">id</span>)</span><br><span class="line">    singleton.ServerLock.Unlock()</span><br><span class="line">    singleton.ReSortServer()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而删除之后 ID 还是不连续的，这让我强迫症犯了非常的难受，而且后台显示不连续就算了，访客查看居然也是不连续的（使用 Neko-Mdui 主题，其他主题不显示服务器 ID，可能没有这个困扰）。</p><p>2、代码分析<br>问题出在哪里呢？我们来看看 ReSortServer 方法，根据说明实现了一个排序功能：</p><p>ReSortServer 根据服务器 ID 对服务器列表进行排序（ID 越大越靠前）。</p><p>代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">func <span class="function"><span class="title">ReSortServer</span></span>() &#123;</span><br><span class="line">    ServerLock.RLock()</span><br><span class="line">    defer ServerLock.RUnlock()</span><br><span class="line">    SortedServerLock.Lock()</span><br><span class="line">    defer SortedServerLock.Unlock()</span><br><span class="line"></span><br><span class="line">    SortedServerList = []*model.Server&#123;&#125;</span><br><span class="line">    SortedServerListForGuest = []*model.Server&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, s := range ServerList &#123;</span><br><span class="line">        SortedServerList = append(SortedServerList, s)</span><br><span class="line">        <span class="keyword">if</span> !s.HideForGuest &#123;</span><br><span class="line">            SortedServerListForGuest = append(SortedServerListForGuest, s)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 按照服务器 ID 排序的具体实现（ID 越大越靠前）</span><br><span class="line">    sort.SliceStable(SortedServerList, func(i, j int) bool &#123;</span><br><span class="line">        <span class="keyword">if</span> SortedServerList[i].DisplayIndex == SortedServerList[j].DisplayIndex &#123;</span><br><span class="line">            <span class="built_in">return</span> SortedServerList[i].ID &lt; SortedServerList[j].ID</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> SortedServerList[i].DisplayIndex &gt; SortedServerList[j].DisplayIndex</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    sort.SliceStable(SortedServerListForGuest, func(i, j int) bool &#123;</span><br><span class="line">        <span class="keyword">if</span> SortedServerListForGuest[i].DisplayIndex == SortedServerListForGuest[j].DisplayIndex &#123;</span><br><span class="line">            <span class="built_in">return</span> SortedServerListForGuest[i].ID &lt; SortedServerListForGuest[j].ID</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> SortedServerListForGuest[i].DisplayIndex &gt; SortedServerListForGuest[j].DisplayIndex</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯，没学过 Golang 看不懂，但是大致可以根据命名看出这个方法仅对列表进行排序，并不重新设置 ID。</p><p>3、解决方法<br>直接编辑 &#x2F;opt&#x2F;nezha&#x2F;dashboard&#x2F;data&#x2F;sqlite.db，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UPDATE servers</span><br><span class="line">SET <span class="built_in">id</span> = (</span><br><span class="line">    SELECT COUNT(*) </span><br><span class="line">    FROM servers AS s </span><br><span class="line">    WHERE s.rowid &lt;= servers.rowid</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>即可解决。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 哪吒面板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/readme/"/>
      <url>/readme/</url>
      
        <content type="html"><![CDATA[<p>title: &quot;Markdown语法&quot;  date: 2025-05-05  tags:  - 服务器  - Markdown  categories:  - 博客  —  几个#就是几级标题 一级标题 二级标题 三级标题 四级标题 五级标题 正文 <strong>加粗</strong> 加粗 <em>斜体</em> 一个※斜体 <em><strong>粗体加斜体</strong></em> 粗体加斜体 <del>删除线</del> 删除线 &lt;u&amp;g…’<br>tags:</p><ul><li>服务器</li><li>Markdown<br>title: Markdown语法<br>updated: ‘2025-05-11T17:46:12.962+08:00’</li></ul><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">title: &quot;Markdown语法&quot;</span><br><span class="line"></span><br><span class="line">date: 2025-05-05</span><br><span class="line"></span><br><span class="line">tags:</span><br><span class="line"></span><br><span class="line">- 服务器</span><br><span class="line"></span><br><span class="line">- Markdown</span><br><span class="line"></span><br><span class="line">categories:</span><br><span class="line"></span><br><span class="line">- 博客</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><code>几个#就是几级标题</code></p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><p>正文<br><code>**加粗**</code><br><strong>加粗</strong></p><p><code>*斜体*</code><br><em>一个※斜体</em><br><code>***粗体加斜体***</code><br><em><strong>粗体加斜体</strong></em><br><code>~~删除线~~</code><br><del>删除线</del><br><code>&lt;u&gt;&lt;U&gt;下划线&lt;U&gt;&lt;/u&gt;</code><br><u><U>下划线<U></u></p><ul><li><p>➖+空格 无序列表</p></li><li><p>无序列表 2</p></li><li><p>无序列表 3</p></li><li><p>层级无序列表 1</p></li><li><p>无序列表 2</p><ul><li>空格+➖+空格   层级无序列表 2.1</li><li>无序列表 2.2</li></ul></li></ul><p><code>1. 有序表</code></p><ol><li>有序列表 1</li><li>有序列表 2</li><li>有序列表 3</li></ol><p><code>&gt; 引用 读一本好书，就是在和高尚的人谈话。 ——歌德</code></p><blockquote><p>引用 读一本好书，就是在和高尚的人谈话。 ——歌德</p></blockquote><p>可以在一行中用三个以上的减号来建立一个分隔线，同时需要在分隔线的上面空一行。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">分隔线,需要在分隔线的上面空一行</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">可以使用冒号来定义表格的对齐方式，如下：</span><br><span class="line">| 姓名    | 年龄  | 工作     |</span><br><span class="line">|:----- |:---:| ------:|</span><br><span class="line">| 小可爱   | 18  | 吃可爱多   |</span><br><span class="line">| 小小勇敢  | 20  | 爬棵勇敢树  |</span><br><span class="line">| 小小小机智 | 22  | 看一本机智书 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">姓名</th><th align="center">年龄</th><th align="right">工作</th></tr></thead><tbody><tr><td align="left">小可爱</td><td align="center">18</td><td align="right">吃可爱多</td></tr><tr><td align="left">小小勇敢</td><td align="center">20</td><td align="right">爬棵勇敢树</td></tr><tr><td align="left">小小小机智</td><td align="center">22</td><td align="right">看一本机智书</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">链接：[文字](链接)</span><br><span class="line">脚注：[文字](脚注解释 &quot;脚注名字&quot;)</span><br><span class="line">图片：![图片描述](img/taikongren.jpg)</span><br></pre></td></tr></table></figure><p><a href="%E9%93%BE%E6%8E%A5">文字</a><br><a href="%E8%84%9A%E6%B3%A8%E8%A7%A3%E9%87%8A" title="脚注名字">文字</a><br><img src="https://img.887178.xyz/Qexo/2025-05/taikongren-1746956453.621337.jpg" alt="图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">单行代码，如下：</span><br><span class="line">`单行代码`</span><br><span class="line"></span><br><span class="line">多行代码，第一行反引号后面表示代码块所使用的语言</span><br><span class="line">支持</span><br><span class="line">bash</span><br><span class="line">clojure，cpp，cs，css</span><br><span class="line">dart，dockerfile, diff</span><br><span class="line">erlang</span><br><span class="line">go，gradle，groovy</span><br><span class="line">haskell</span><br><span class="line">java，javascript，json，julia</span><br><span class="line">kotlin</span><br><span class="line">lisp，lua</span><br><span class="line">makefile，markdown，matlab</span><br><span class="line">objectivec</span><br><span class="line">perl，php，python</span><br><span class="line">r，ruby，rust</span><br><span class="line">scala，shell，sql，swift</span><br><span class="line">tex，typescript</span><br><span class="line">verl</span><br><span class="line">xml</span><br><span class="line">yaml</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello word&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>零基础快速搭建hexo</title>
      <link href="/hexo/"/>
      <url>/hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h2><ol><li><a href="https://nodejs.org/en">Node</a>（<strong>必备</strong>）</li><li><a href="https://git-scm.com/downloads">Git</a>（<strong>必备</strong>）</li><li><a href="https://code.visualstudio.com/">VSCode</a>（<strong>可选</strong>）</li><li>域名，建议配置一个域名以避免被防火墙阻挡，推荐购买链接： <a href="https://spaceship.sjv.io/limin">https://spaceship.sjv.io/limin</a></li><li>配置 Cloudflare，托管域名：<a href="https://youtu.be/3a6ImhcizcU?si=axjlZmba3q9wtTEN">托管教程</a></li><li>创建免费图床：<a href="https://youtu.be/ah5szwr4JxM?si=18c42iG8NqIcHJLX">图床搭建教程</a></li><li>注册cloudflare怕被扣费，推荐用myfine有50张虚拟卡（需要护照），教程链接：<a href="https://youtu.be/gg3Ji4WDszs?si=fqtFwTMjsnoUExxG">注册教程</a></li><li>Hexo官方主题展示：<a href="https://hexo.io/themes/">点击跳转</a>##</li></ol><h2 id="安装-Node"><a href="#安装-Node" class="headerlink" title="安装 Node"></a>安装 Node</h2><ol><li>从 <a href="https://nodejs.org/en">Node 官网</a> 下载适合自己系统的版本。</li><li>完成安装，Windows电脑建议使用默认目录 <code>C:/Program Files/nodejs/</code>，苹果电脑无所谓。</li><li>验证安装成功，在命令行中输入 <code>node -v</code> 检查版本信息。</li></ol><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><ol><li>从 <a href="https://git-scm.com/downloads">Git 官网</a> 下载适配的 Git 版本。</li><li>Windows 用户可使用默认目录安装 Git，Mac 用户则按提示在终端操作。</li><li>验证安装完毕后，Windows 用户会在开始菜单中看到 <code>Git Bash</code> 等应用。</li></ol><h2 id="配置-Git-密钥并连接至-Github"><a href="#配置-Git-密钥并连接至-Github" class="headerlink" title="配置 Git 密钥并连接至 Github"></a>配置 Git 密钥并连接至 Github</h2><p>常用 Git 命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 显示所有生效的 Git 配置项</span><br><span class="line">git config -l</span><br><span class="line">// 显示 系统级配置</span><br><span class="line">git config --system --list</span><br><span class="line">// 显示当前用户的全局配置</span><br><span class="line">git config --global --list</span><br><span class="line"></span><br><span class="line">// 完整克隆整个仓库的所有历史记录</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:username/username.github.io.git</span><br><span class="line">// 使用 SSH 协议，克隆 GitHub 上的博客仓库，只拉取最新一次提交（浅克隆）</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:username/username.github.io.git --depth=1</span><br><span class="line"></span><br><span class="line">//将本地更改提交并推送到远程仓库</span><br><span class="line">// 将当前目录下的所有修改（包括新增、修改、删除的文件）添加到暂存区</span><br><span class="line">// . 表示“当前目录及所有子目录</span><br><span class="line">git add .</span><br><span class="line">// 提交已暂存的更改</span><br><span class="line">// -m 后跟的是提交信息，这里是 <span class="string">&quot;add_branch&quot;</span></span><br><span class="line">git commit -m <span class="string">&quot;add_branch&quot;</span></span><br><span class="line">// 将当前分支的提交推送到远程仓库对应的分支</span><br><span class="line">// 如果是第一次推送新分支，建议用： git push -u origin &lt;分支名&gt;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>通过 <code>git config -l</code> 验证是否成功。</p><h2 id="配置公钥连接-Github"><a href="#配置公钥连接-Github" class="headerlink" title="配置公钥连接 Github"></a>配置公钥连接 Github</h2><ol><li>生成 SSH 公钥：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>一路回车生成密钥，进入 <code>.ssh</code> 文件夹复制 <code>id_rsa.pub</code> 公钥内容，配置到 Github 的 SSH 设置中。</p><ol start="2"><li>将 SSH KEY 配置到 GitHub</li></ol><p>进入<code>github</code>，点击右上角头像 选择<code>settings</code>，进入设置页后选择 <code>SSH and GPG keys</code>，名字随便起，公钥填到<code>Key</code>那一栏。</p><ol start="3"><li>测试连接：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>第一次连接会提示<code>Are you sure you want to continue connecting (yes/no/[fingerprint])?</code>，输入<code>yes</code>即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi he-zhenpeng! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><h2 id="创建-GitHub-io-仓库"><a href="#创建-GitHub-io-仓库" class="headerlink" title="创建 GitHub.io 仓库"></a>创建 GitHub.io 仓库</h2><ol><li>点击右上角的 <code>+</code> 按钮，选择新建仓库，命名格式为 <code>&lt;用户名&gt;.github.io</code>，(注意：前缀必须为用户名)选择公开 <code>Public</code>。</li><li>点击 <code>Creat repository</code> 进行创建即可。</li></ol><h2 id="初始化-Hexo-博客"><a href="#初始化-Hexo-博客" class="headerlink" title="初始化 Hexo 博客"></a>初始化 Hexo 博客</h2><ol><li>创建文件夹保存博客源码：</li></ol><p>苹果用户随意创建好文件夹后，在文件夹右击，选择“服务”选择“新建终端窗口以便操作”</p><p>Windows用户可以（例如 <code>D:/Hexo-Blog</code>），在该文件夹内启动 Git Bash 或终端。</p><ol start="2"><li>安装 Hexo：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli &amp;&amp; hexo -v</span><br></pre></td></tr></table></figure><ol start="3"><li>初始化 Hexo 项目安装依赖：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><ol start="4"><li>启动项目并验证：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>在浏览器中访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 以查看效果。</p><h2 id="将静态博客挂载到-GitHub-Pages"><a href="#将静态博客挂载到-GitHub-Pages" class="headerlink" title="将静态博客挂载到 GitHub Pages"></a>将静态博客挂载到 GitHub Pages</h2><ol><li>修改 <code>_config.yml</code> 文件，配置 <code>repository</code> 为你的 GitHub 地址，分支改为 <code>main</code>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:你的用户名/你的用户名.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 <code>hexo-deployer-git</code>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="3"><li>部署到 GitHub：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Git BASH终端</span><br><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  </span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line"></span><br><span class="line">// VSCODE终端</span><br><span class="line">hexo cl; hexo g; hexo d</span><br></pre></td></tr></table></figure><h2 id="将静态博客挂载到-Cloudflare-Pages"><a href="#将静态博客挂载到-Cloudflare-Pages" class="headerlink" title="将静态博客挂载到 Cloudflare Pages"></a>将静态博客挂载到 Cloudflare Pages</h2><ol><li>通过 Cloudflare Pages 连接 Git 仓库。</li><li>登录 GitHub，点击保存并部署。</li><li>部署成功后，访问 Cloudflare 提供的链接。</li></ol><p>如有自定义域名，可以在 Cloudflare Pages 中绑定。没有建议去申请，这样博客就不被墙了。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="新建一篇博文"><a href="#新建一篇博文" class="headerlink" title="新建一篇博文"></a>新建一篇博文</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 这是一篇新的博文</span><br></pre></td></tr></table></figure><h3 id="生成标签页和分类页"><a href="#生成标签页和分类页" class="headerlink" title="生成标签页和分类页"></a>生成标签页和分类页</h3><h4 id="生成标签页："><a href="#生成标签页：" class="headerlink" title="生成标签页："></a>生成标签页：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>找到 <code>source/tags/index.md</code> 文件，添加 <code>type: &quot;tags&quot;</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2024-07-05 03:36:02</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">top_img: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="生成分类页："><a href="#生成分类页：" class="headerlink" title="生成分类页："></a>生成分类页：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>找到 <code>source/categories/index.md</code> 文件，添加 <code>type: &quot;categories&quot;</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2024-10-22 03:36:48</span><br><span class="line">aside: false</span><br><span class="line">top_img: false</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="配置文章模板"><a href="#配置文章模板" class="headerlink" title="配置文章模板"></a>配置文章模板</h3><p><code>/scaffolds</code> 目录下有几个模板文件：</p><ul><li><strong>post.md</strong>：新建博文模板</li><li><strong>page.md</strong>：新建标签页模板</li></ul><p><strong>post.md</strong> 模板示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125; #【必需】页面标题</span><br><span class="line">date: #【必需】页面创建日期</span><br><span class="line">updated: #【可选】页面更新日期</span><br><span class="line">tags: #【可选】文章标签</span><br><span class="line">categories: #【可选】文章分类</span><br><span class="line">keywords: #【可选】文章关键字</span><br><span class="line">description: #【可选】文章描述</span><br><span class="line">top: # 1 置顶</span><br><span class="line">top_img: #【可选】文章顶部图片</span><br><span class="line">comments: #【可选】显示文章评论模块(默认 true)</span><br><span class="line">cover: https://img.090227.xyz/file/ae62475a131f3734a201c.png #【可选】文章缩略图</span><br><span class="line">toc: #【可选】显示文章 TOC</span><br><span class="line">toc_number: #【可选】显示 toc_number</span><br><span class="line">toc_style_simple: #【可选】显示 toc 简洁模式</span><br><span class="line">copyright: #【可选】显示文章版权模块</span><br><span class="line">copyright_author: #【可选】文章版权作者</span><br><span class="line">copyright_author_href: #【可选】作者链接</span><br><span class="line">copyright_url: #【可选】版权链接</span><br><span class="line">copyright_info: #【可选】版权声明文字</span><br><span class="line">mathjax: #【可选】显示 mathjax</span><br><span class="line">katex: #【可选】显示 katex</span><br><span class="line">aplayer: #【可选】加载 aplayer 的 js 和 css</span><br><span class="line">highlight_shrink: #【可选】配置代码框是否展开</span><br><span class="line">aside: #【可选】显示侧边栏 (默认 true)</span><br><span class="line">swiper_index: 10 #【可选】首页轮播图配置</span><br><span class="line">top_group_index: 10 #【可选】首页右侧卡片组配置</span><br><span class="line">ai: #【可选】文章 ai 摘要</span><br><span class="line">background: &quot;#fff&quot; #【可选】文章主色</span><br><span class="line">---</span><br><span class="line">&lt;div class=&quot;video-container&quot;&gt;[视频内嵌代码]&lt;/div&gt;</span><br><span class="line">&lt;style&gt;.video-container &#123; position: relative; padding-top: 56.25%; &#125; .video-container iframe &#123; position: absolute; top: 0; left: 0; width: 100%; height: 100%; &#125;&lt;/style&gt;page.md 模板示例</span><br></pre></td></tr></table></figure><p><strong>page.md</strong> 模板示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125; #【必需】页面标题</span><br><span class="line">date: #【必需】页面创建日期</span><br><span class="line">type: #【必需】标签、分类等</span><br><span class="line">updated: #【可选】页面更新日期</span><br><span class="line">comments: #【可选】显示页面评论模块</span><br><span class="line">description: #【可选】页面描述</span><br><span class="line">keywords: #【可选】页面关键字</span><br><span class="line">top_img: https://img.090227.xyz/file/ae62475a131f3734a201c.png #【可选】页面顶部图片</span><br><span class="line">mathjax: #【可选】显示 mathjax</span><br><span class="line">katex: #【可选】显示 katex</span><br><span class="line">aside: #【可选】显示侧边栏 (默认 true)</span><br><span class="line">aplayer: #【可选】加载 aplayer 的 js 和 css</span><br><span class="line">highlight_shrink: #【可选】配置代码框是否展开</span><br><span class="line">top_single_background: #【可选】部分页面的顶部模块背景图片</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="开启本地搜索"><a href="#开启本地搜索" class="headerlink" title="开启本地搜索"></a>开启本地搜索</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>安装 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h4 id="设置主题配置文件"><a href="#设置主题配置文件" class="headerlink" title="设置主题配置文件"></a>设置主题配置文件</h4><p>在配置文件中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  preload: false</span><br><span class="line">  CDN:</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">enable</td><td align="center">是否开启本地搜索</td></tr><tr><td align="center">preload</td><td align="center">预加载，进入网页后自动加载搜索文件</td></tr><tr><td align="center">CDN</td><td align="center">搜索文件的 CDN 地址（默认使用本地链接）</td></tr></tbody></table><h3 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h3><p>修改网站图标：</p><ul><li>在线制作ico图标：<a href="https://www.bitbug.net/">链接</a></li></ul><p>修改以下位置的 <code>favicon.ico</code>：</p><ul><li><code>themes/anzhiyu/source/img/favicon.ico</code></li><li><code>.deploy_git/img</code></li><li><code>public/img</code></li><li><code>.deploy_git</code></li></ul><p>替换为自己的图标，注意原图标大小。</p><p>将 <code>themes/anzhiyu/source/img/siteicon/</code> 下的 <code>32.png</code> 和 <code>16.png</code> 替换为自己的图标，注意原图标大小。</p><p>保存后，运行以下指令更新：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h3><h4 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-topindex --save</span><br></pre></td></tr></table></figure><h4 id="设置置顶"><a href="#设置置顶" class="headerlink" title="设置置顶"></a>设置置顶</h4><p>在需要置顶的文章中添加 <code>top</code> 参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 每天一个linux命令</span><br><span class="line">date: 2017-01-23 11:41:48</span><br><span class="line">top: 1</span><br><span class="line">categories:</span><br><span class="line">- 运维</span><br><span class="line">tags:</span><br><span class="line">- linux命令</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>如果存在多个置顶文章，<code>top</code> 后的参数越大，越靠前。</p><h3 id="添加任意文件"><a href="#添加任意文件" class="headerlink" title="添加任意文件"></a>添加任意文件</h3><p>若想在网站根目录添加 <code>ads.txt</code> 文件，只需在 <code>/source</code> 文件夹下放置该文件即可。</p><h2 id="安装AnZhiYu主题"><a href="#安装AnZhiYu主题" class="headerlink" title="安装AnZhiYu主题"></a>安装AnZhiYu主题</h2><h3 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h3><p>在博客根目录里安装最新版【推荐】：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><h3 id="安装-Pug-和-Stylus-渲染插件"><a href="#安装-Pug-和-Stylus-渲染插件" class="headerlink" title="安装 Pug 和 Stylus 渲染插件"></a>安装 Pug 和 Stylus 渲染插件</h3><p>运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h3 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h3><p>修改 <code>Hexo</code> 配置文件 <code>_config.yml</code>，将主题改为 <code>anzhiyu</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: anzhiyu</span><br></pre></td></tr></table></figure><h3 id="覆盖配置"><a href="#覆盖配置" class="headerlink" title="覆盖配置"></a>覆盖配置</h3><p>覆盖配置可将主题配置放置在 anzhiyu 目录之外，避免在更新主题时丢失自定义的配置。通过 Npm 安装主题的用户可忽略，其他用户建议学习使用。</p><ul><li>macOS&#x2F;Linux 在博客根目录运行：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -rf ./themes/anzhiyu/_config.yml ./_config.anzhiyu.yml</span><br></pre></td></tr></table></figure><ul><li>Windows 用户复制 <code>/themes/anzhiyu/_config.yml</code> 到 Hexo 根目录，并重命名为 <code>_config.anzhiyu.yml</code>。</li></ul><p>后续修改主题配置只需更新 <code>_config.anzhiyu.yml</code>。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><code>_config.anzhiyu.yml</code> 中的配置优先级高于 <code>_config.yml</code>。</li><li>每次更新主题时可能存在配置变更，请查看更新说明，并手动同步修改 <code>_config.anzhiyu.yml</code>。</li><li>可通过 <code>hexo g --debug</code> 查看覆盖配置是否生效。</li><li>若要将某些配置覆盖为空，注意不要删除主键。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
