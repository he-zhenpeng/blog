<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>alpine系统搭建hy2节点</title>
      <link href="/blog/2025/05/08/hy2/"/>
      <url>/blog/2025/05/08/hy2/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>更新系统</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk update &amp;&amp; apk upgrade</span><br></pre></td></tr></table></figure><ul><li><strong>查看ip</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl ifconfig.me</span><br></pre></td></tr></table></figure><ul><li><strong>alpine中安装hysteria2</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O hy2.sh https://raw.githubusercontent.com/zrlhk/alpine-hysteria2/main/hy2.sh  &amp;&amp; sh hy2.sh</span><br></pre></td></tr></table></figure><p>打开V2rayN，选择服务器，选择添加hy2服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">别名：随便</span><br><span class="line">地址：2a01:4f9:6b:47e9::345       ipv6</span><br><span class="line">端口：40443                       去配置文件：/etc/hysteria/config.yaml 查看</span><br><span class="line">密码：5PK35VON4/KM64bxw8cEXtkt    去配置文件：/etc/hysteria/config.yaml 查看</span><br><span class="line">混淆密码：空</span><br><span class="line">跳跃端口范围   空</span><br><span class="line"></span><br><span class="line">传输层安全  tls</span><br><span class="line">SNI    bing.com</span><br><span class="line">跳过证书验证   true      其他默认</span><br></pre></td></tr></table></figure><ul><li><strong>卸载Hysteria2</strong></li></ul><ol><li><strong>停止运行中的hy2服务</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rc-service hysteria stop</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>禁用开机自启动</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rc-update del hysteria</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>删除hy2服务文件</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /etc/init.d/hysteria</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>删除hy2配置文件</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /etc/hysteria/</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>确认卸载完成</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep hysteria</span><br></pre></td></tr></table></figure><p>如果<strong>仅显示 <code>grep hysteria</code></strong>，则表明系统中已无 Hysteria2 进程，卸载成功。</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
          <category> 节点搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 节点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSSH搭建教程</title>
      <link href="/blog/2025/05/08/webssh/"/>
      <url>/blog/2025/05/08/webssh/</url>
      
        <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><ul><li> <strong>Python环境安装</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade -y</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">系统</th><th align="center">安装Python 2</th><th>安装Python 3</th><th>安装pip(Python 2)</th><th align="center">安装pip3(Python 3)</th></tr></thead><tbody><tr><td align="center">Debian&#x2F;Ubuntu</td><td align="center">apt install python</td><td>apt install python3</td><td>apt install python-pip</td><td align="center">apt install python3-pip</td></tr><tr><td align="center">CentOS 7</td><td align="center">yum install python</td><td>自带 Python 2.7，可选升级 Python 3：yum install python3</td><td>yum install python2-pip</td><td align="center">yum install python3-pip</td></tr><tr><td align="center">CentOS 8&#x2F;Stream</td><td align="center">dnf install python2</td><td>dnf install python3</td><td>dnf install python2-pip</td><td align="center">dnf install python3-pip</td></tr></tbody></table><h1 id="二、安装工作"><a href="#二、安装工作" class="headerlink" title="二、安装工作"></a>二、安装工作</h1><p><a href="https://github.com/he-zhenpeng/webssh">webssh仓库地址</a></p><ol><li>下载webssh安装包命令：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/amclubs/webssh</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>绑定Cloudflare域名生成证书</strong>，并上传到服务器指定目录。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd websssh</span><br></pre></td></tr></table></figure><ol start="3"><li>安装webssh命令：</li></ol><p><strong>Python2</strong> 安装webssh命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install webssh</span><br></pre></td></tr></table></figure><p><strong>Python3</strong> 安装webssh命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install webssh</span><br></pre></td></tr></table></figure><ol start="4"><li>运行webssh命令 <strong>(certfile&#x2F;keyfile证书目录换成你服务器存储的目录和文件名称)</strong>：</li></ol><p><strong>Python2</strong> 运行webssh命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup python run.py --certfile=&#x27;/root/cert/809098.pem&#x27; --keyfile=&#x27;/root/cert/809098.key&#x27; --sslport=8443 &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p><strong>Python3</strong> 运行webssh命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup python3 run.py --certfile=&#x27;/root/cert/809098.pem&#x27; --keyfile=&#x27;/root/cert/809098.key&#x27; --sslport=8443 &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><ol start="5"><li>访问webssh：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://域名:端口</span><br></pre></td></tr></table></figure><h1 id="三、设置开机自动启动webssh"><a href="#三、设置开机自动启动webssh" class="headerlink" title="三、设置开机自动启动webssh"></a>三、设置开机自动启动webssh</h1><p><strong>WorkingDirectory&#x2F;certfile&#x2F;keyfile证书目录换成你服务器存储的目录和文件名称</strong></p><ol><li>写一个 service 文件 webssh.service</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/webssh.service</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=WebSSH Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">WorkingDirectory=/root/webssh</span><br><span class="line">ExecStart=/usr/bin/python3 run.py --certfile=&#x27;/root/cert/809098.pem&#x27; --keyfile=&#x27;/root/cert/809098.key&#x27; --sslport=8443</span><br><span class="line">Restart=always</span><br><span class="line">User=root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ol start="2"><li>让服务生效</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable webssh</span><br><span class="line">systemctl start webssh</span><br></pre></td></tr></table></figure><ol start="3"><li>管理服务</li></ol><p>查看状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status webssh    </span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart webssh</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop webssh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> webssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/blog/2025/05/05/readme/"/>
      <url>/blog/2025/05/05/readme/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">title: &quot;Markdown语法&quot;</span><br><span class="line"></span><br><span class="line">date: 2025-05-05</span><br><span class="line"></span><br><span class="line">tags:</span><br><span class="line"></span><br><span class="line">- 服务器</span><br><span class="line"></span><br><span class="line">- Markdown</span><br><span class="line"></span><br><span class="line">categories:</span><br><span class="line"></span><br><span class="line">- 博客</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><code>几个#就是几级标题</code></p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><p>正文<br><code>**加粗**</code><br><strong>加粗</strong></p><p><code>*斜体*</code><br><em>一个※斜体</em><br><code>***粗体加斜体***</code><br><em><strong>粗体加斜体</strong></em><br><code>~~删除线~~</code><br><del>删除线</del><br><code>&lt;u&gt;&lt;U&gt;下划线&lt;U&gt;&lt;/u&gt;</code><br><u><U>下划线<U></u></p><ul><li><p>➖+空格 无序列表</p></li><li><p>无序列表 2</p></li><li><p>无序列表 3</p></li><li><p>层级无序列表 1</p></li><li><p>无序列表 2</p><ul><li>空格+➖+空格   层级无序列表 2.1</li><li>无序列表 2.2</li></ul></li></ul><p><code>1. 有序表</code></p><ol><li>有序列表 1</li><li>有序列表 2</li><li>有序列表 3</li></ol><p><code>&gt; 引用 读一本好书，就是在和高尚的人谈话。 ——歌德</code></p><blockquote><p>引用 读一本好书，就是在和高尚的人谈话。 ——歌德</p></blockquote><p>可以在一行中用三个以上的减号来建立一个分隔线，同时需要在分隔线的上面空一行。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">分隔线,需要在分隔线的上面空一行</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">可以使用冒号来定义表格的对齐方式，如下：</span><br><span class="line">| 姓名    | 年龄  | 工作     |</span><br><span class="line">|:----- |:---:| ------:|</span><br><span class="line">| 小可爱   | 18  | 吃可爱多   |</span><br><span class="line">| 小小勇敢  | 20  | 爬棵勇敢树  |</span><br><span class="line">| 小小小机智 | 22  | 看一本机智书 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">姓名</th><th align="center">年龄</th><th align="right">工作</th></tr></thead><tbody><tr><td align="left">小可爱</td><td align="center">18</td><td align="right">吃可爱多</td></tr><tr><td align="left">小小勇敢</td><td align="center">20</td><td align="right">爬棵勇敢树</td></tr><tr><td align="left">小小小机智</td><td align="center">22</td><td align="right">看一本机智书</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">链接：[文字](链接)</span><br><span class="line">脚注：[文字](脚注解释 &quot;脚注名字&quot;)</span><br><span class="line">图片：![图片描述](img/taikongren.jpg)</span><br></pre></td></tr></table></figure><p><a href="%E9%93%BE%E6%8E%A5">文字</a><br><a href="%E8%84%9A%E6%B3%A8%E8%A7%A3%E9%87%8A" title="脚注名字">文字</a><br><img src="/blog/img/readme/taikongren.jpg" alt="图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">单行代码，如下：</span><br><span class="line">`单行代码`</span><br><span class="line"></span><br><span class="line">多行代码，第一行反引号后面表示代码块所使用的语言</span><br><span class="line">支持</span><br><span class="line">bash</span><br><span class="line">clojure，cpp，cs，css</span><br><span class="line">dart，dockerfile, diff</span><br><span class="line">erlang</span><br><span class="line">go，gradle，groovy</span><br><span class="line">haskell</span><br><span class="line">java，javascript，json，julia</span><br><span class="line">kotlin</span><br><span class="line">lisp，lua</span><br><span class="line">makefile，markdown，matlab</span><br><span class="line">objectivec</span><br><span class="line">perl，php，python</span><br><span class="line">r，ruby，rust</span><br><span class="line">scala，shell，sql，swift</span><br><span class="line">tex，typescript</span><br><span class="line">verl</span><br><span class="line">xml</span><br><span class="line">yaml</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello word&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老王Node-ws部署教程，点亮你的越南鸡~适用于所有Node环境的玩具和容器</title>
      <link href="/blog/2025/05/03/node-ws/"/>
      <url>/blog/2025/05/03/node-ws/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p><strong>项目作者</strong>：老王<br><strong>GitHub仓库项目地址</strong>：<a href="https://github.com/eooce/node-ws">node-ws</a><br>本项目适用于 Node 环境的玩具和容器，基于 Node 第三方的 <code>ws</code> 库，集成了哪吒探针服务，并支持自行添加环境变量。</p><h3 id="PaaS-平台设置的环境变量"><a href="#PaaS-平台设置的环境变量" class="headerlink" title="PaaS 平台设置的环境变量"></a>PaaS 平台设置的环境变量</h3><table><thead><tr><th>变量名</th><th>是否必须</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>UUID</td><td>否</td><td>de04add9-5c68-6bab-950c-08cd5320df33</td><td>开启了哪吒 v1, 请修改 UUID</td></tr><tr><td>PORT</td><td>否</td><td>3000</td><td>监听端口</td></tr><tr><td>NEZHA_SERVER</td><td>否</td><td></td><td>哪吒 v1 填写形式：nz.abc.com:8008，哪吒 v0 填写形式：nz.abc.com</td></tr><tr><td>NEZHA_PORT</td><td>否</td><td></td><td>哪吒 v1 没有此变量，v0 的 agent 端口</td></tr><tr><td>NEZHA_KEY</td><td>否</td><td></td><td>哪吒 v1 的 NZ_CLIENT_SECRET 或 v0 的 agent 端口</td></tr><tr><td>NAME</td><td>否</td><td></td><td>节点名称前缀，例如：Glitch</td></tr><tr><td>DOMAIN</td><td>是</td><td></td><td>项目分配的域名或已反代的域名，不包括 https:&#x2F;&#x2F; 前缀</td></tr><tr><td>SUB_PATH</td><td>否</td><td>sub</td><td>订阅路径</td></tr><tr><td>AUTO_ACCESS</td><td>否</td><td>false</td><td>是否开启自动访问保活, false 为关闭, true 为开启, 需同时填写 DOMAIN 变量</td></tr></tbody></table><p><strong>域名&#x2F;sub</strong> 查看节点信息，也是订阅地址，包含 https:&#x2F;&#x2F; 或 http:&#x2F;&#x2F; 前缀，非标端口，域名:端口&#x2F;sub。</p><p><strong>温馨提示</strong>：README.md 为说明文件，请不要上传。</p><p><strong>JS 混淆地址</strong>：<a href="https://obfuscator.io/">obfuscator.io</a></p><h2 id="部署教程"><a href="#部署教程" class="headerlink" title="部署教程"></a>部署教程</h2><p>以大家口中的“越南鸡”（DataOnline）为例，下面是详细的部署步骤：</p><h3 id="1-打开老王-Node-ws-项目地址，下载-index-js-和-package-json-到本地"><a href="#1-打开老王-Node-ws-项目地址，下载-index-js-和-package-json-到本地" class="headerlink" title="1. 打开老王 Node-ws 项目地址，下载 index.js 和 package.json 到本地"></a>1. 打开老王 Node-ws 项目地址，下载 <code>index.js</code> 和 <code>package.json</code> 到本地</h3><h3 id="2-注册-DataOnline-账号"><a href="#2-注册-DataOnline-账号" class="headerlink" title="2. 注册 DataOnline 账号"></a>2. 注册 DataOnline 账号</h3><p>（因大家基本上都注册过了，这里一笔带过）</p><ol><li>进入 DataOnline 官网</li><li>邮箱获取验证码认证后，点击产品选购，选择右下角廉价主机，点击 <strong>Select</strong></li><li>选择免费的服务，添加域名，点击 <strong>订购</strong></li><li><strong>Dashboard ➡ 选择你的服务 ➡ Access Control Panel ➡ Click here to access Control Panel</strong></li></ol><h3 id="3-在-CloudFlare-托管的域名中添加一个-A-记录"><a href="#3-在-CloudFlare-托管的域名中添加一个-A-记录" class="headerlink" title="3. 在 CloudFlare 托管的域名中添加一个 A 记录"></a>3. 在 CloudFlare 托管的域名中添加一个 A 记录</h3><ol><li>将 IPV4 地址填写为 <code>103.137.185.66</code>，并开启小黄云</li><li>然后回到 DataOnline，进入管理页面，账号管理 ➡ 域名设置 ➡ 新增，填入刚才解析的域名（下面所有填写的域名都是这个域名）</li></ol><h3 id="4-上传文件到服务器"><a href="#4-上传文件到服务器" class="headerlink" title="4. 上传文件到服务器"></a>4. 上传文件到服务器</h3><ol><li><strong>系统信息和文件 ➡ 文件管理器</strong></li><li>进入 <code>domains/你的域名/public_html</code> 目录，将文件上传到当前目录</li></ol><h3 id="5-配置并运行-Node-js-应用"><a href="#5-配置并运行-Node-js-应用" class="headerlink" title="5. 配置并运行 Node.js 应用"></a>5. 配置并运行 Node.js 应用</h3><ol><li>在 DataOnline 管理后台，点击 <strong>附加功能 ➡ Setup Node.js App ➡ CREATE APPLICATION</strong></li><li>创建新的程序，选择 <strong>Run NPM Install ➡ Run JS script</strong></li><li><strong>Node.js version</strong> 选择 <code>22.14.0</code></li><li><strong>Application root</strong> 填写 <code>domains/你的域名/public_html</code></li><li><strong>Application startup file</strong> 填写 <code>index.js</code></li></ol><h3 id="6-在浏览器打开并查看节点信息"><a href="#6-在浏览器打开并查看节点信息" class="headerlink" title="6. 在浏览器打开并查看节点信息"></a>6. 在浏览器打开并查看节点信息</h3><ol><li>访问 <code>https://你的域名/sub</code> 查看节点信息</li></ol><h3 id="7-删除程序"><a href="#7-删除程序" class="headerlink" title="7. 删除程序"></a>7. 删除程序</h3><ol><li>进入系统信息和文件 ➡ 终端，输入 <code>kill -9 -1</code> 终止所有进程</li><li>进入 <strong>附加功能 ➡ Setup Node.js App</strong>，点击删除按钮</li><li>进入账号管理 ➡ 域名设置，勾选域名，点击右上角删除（勾选删除 Web 数据）</li><li>最好等待 2-3 分钟再重建，删除后需要等待一段时间释放端口，否则会提示端口被占用</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>可在网页终端输入 <code>ps aux</code> 检查 node.js 进程是否正常运行</li><li>运行 <code>index.js</code> 文件耗时可能较长，请耐心等待</li><li>若长时间无响应，可先打开 <code>https://你的域名/sub</code> 检查节点信息是否生成</li><li>若节点信息已生成，哪吒面板已上线，则无需理会响应</li><li>若节点信息未生成，或哪吒面板未上线，请删除程序重新部署</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 哪吒面板 </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署哪吒 v1-Argo 版</title>
      <link href="/blog/2025/05/03/nezha-argo/"/>
      <url>/blog/2025/05/03/nezha-argo/</url>
      
        <content type="html"><![CDATA[<h2 id="1-项目介绍"><a href="#1-项目介绍" class="headerlink" title="1. 项目介绍"></a>1. 项目介绍</h2><p><strong>项目作者</strong>：老王<br><strong>GitHub 仓库</strong>：<a href="https://github.com/eooce/node-ws">argo-nezha-v1</a></p><p>本项目是基于 <strong>Node.js</strong> 的 <strong>ws</strong> 库，集成了 <strong>哪吒面板</strong>，并通过 <strong>Cloudflare Tunnel</strong> 提供安全访问。它适用于 <strong>Node 环境的玩具和容器</strong>，支持自动备份到 GitHub 仓库，并且提供一键部署功能。</p><hr><h2 id="2-部署前置准备"><a href="#2-部署前置准备" class="headerlink" title="2. 部署前置准备"></a>2. 部署前置准备</h2><h3 id="必须事项："><a href="#必须事项：" class="headerlink" title="必须事项："></a>必须事项：</h3><ol><li><p><strong>CloudFlare 设置：</strong></p><ul><li>开启 <strong>GRPC 流量代理</strong>。</li><li>设置 <strong>Tunnel Public Hostname</strong>：<ul><li>类型：<strong>HTTPS</strong></li><li>URL：<code>localhost:443</code></li><li><strong>TLS 设置</strong>：<ul><li>不验证 TLS：开启</li><li>HTTP2 连接：开启</li></ul></li></ul></li><li>记录 <strong>argo 域名</strong> 和 <strong>Token</strong>，备用。</li></ul></li><li><p><strong>GitHub Apps 设置（可选）：</strong></p><ul><li>访问 GitHub 开发者设置 <a href="https://github.com/settings/developers">GitHub Apps</a>。</li><li>新建 OAuth 应用：<ul><li><strong>Application name</strong>：nezha_v1</li><li><strong>Homepage URL</strong>：用于哪吒面板的 <strong>argo</strong> 域名</li><li><strong>Authorization callback URL</strong>：<code>https://用于哪吒面板的argo域名/api/v1/oauth2/callback</code></li></ul></li><li>记录 <strong>Client ID</strong> 和 <strong>Client secrets</strong>，备用。</li></ul></li></ol><h3 id="可选事项："><a href="#可选事项：" class="headerlink" title="可选事项："></a>可选事项：</h3><ul><li>如果希望备份数据到 GitHub 私有仓库，需要设置 <strong>GitHub Token</strong> 和 <strong>GitHub 仓库信息</strong>。</li></ul><hr><h2 id="3-快速部署"><a href="#3-快速部署" class="headerlink" title="3. 快速部署"></a>3. 快速部署</h2><h3 id="VPS-平台一键部署"><a href="#VPS-平台一键部署" class="headerlink" title="VPS 平台一键部署"></a>VPS 平台一键部署</h3><ol><li><p>执行以下一键脚本：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sSL https://raw.githubusercontent.com/yutian81/argo-nezha-v1/github/nezhav1.sh)</span><br></pre></td></tr></table></figure></li><li><p>按提示输入以下变量：</p><ul><li><strong>GITHUB_TOKEN</strong>：GitHub 的访问令牌。</li><li><strong>GITHUB_REPO_OWNER</strong>：GitHub 用户名。</li><li><strong>GITHUB_REPO_NAME</strong>：用于备份的 GitHub 仓库名。</li><li><strong>BACKUP_BRANCH</strong>：用于备份的 GitHub 仓库分支。</li><li><strong>ARGO_AUTH</strong>：Cloudflare Argo Tunnel 令牌（JSON 格式的密钥必须用英文单引号包裹）。</li><li><strong>ARGO_DOMAIN</strong>：在 Argo 中设置的哪吒面板域名。</li></ul></li><li><p>访问面板：</p><ul><li>网址：<code>https://你在argo隧道中设置的面板域名</code></li><li>初始用户名&#x2F;密码：<code>admin/admin</code></li></ul></li></ol><hr><h2 id="4-手动部署"><a href="#4-手动部署" class="headerlink" title="4. 手动部署"></a>4. 手动部署</h2><ol><li><p>克隆仓库并进入目录：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone -b github --depth 1 https://ghproxy.net/https://github.com/yutian81/argo-nezha-v1.git</span><br><span class="line">cd argo-nezha-v1</span><br></pre></td></tr></table></figure></li><li><p>拉取镜像并启动：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker compose pull</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure></li><li><p>配置文件：</p><ul><li>在 <code>/root/argo-nezha-v1/.env</code> 文件中填入变量值。</li><li>如果需要手动更新，执行：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd argo-nezha-v1</span><br><span class="line">docker compose pull &amp;&amp; docker compose up -d</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h2 id="5-PaaS-平台部署"><a href="#5-PaaS-平台部署" class="headerlink" title="5. PaaS 平台部署"></a>5. PaaS 平台部署</h2><ol><li><p>拉取 Docker 镜像：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull yutian81/argo-nezha-v1:latest</span><br></pre></td></tr></table></figure></li><li><p>设置必要变量，与 VPS 部署相同。</p></li><li><p>配置平台，暴露 443 端口。</p></li></ol><hr><h2 id="6-自动更新"><a href="#6-自动更新" class="headerlink" title="6. 自动更新"></a>6. 自动更新</h2><ol><li><p>手动更新：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd argo-nezha-v1 &amp;&amp; docker compose pull &amp;&amp; docker compose up -d</span><br></pre></td></tr></table></figure></li><li><p>自动更新：加入系统 <strong>cron</strong> 任务：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(crontab -l 2&gt;/dev/null | grep -v &quot;argo-nezha-v1&quot;; echo &quot;0 3 * * * cd /root/argo-nezha-v1 &amp;&amp; /usr/bin/docker compose pull &amp;&amp; /usr/bin/docker compose up -d &gt;&gt; /var/log/nezha_update.log 2&gt;&amp;1&quot;) | crontab -</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="7-备份与恢复"><a href="#7-备份与恢复" class="headerlink" title="7. 备份与恢复"></a>7. 备份与恢复</h2><ul><li><strong>自动备份</strong>：项目支持自动备份到 GitHub 私有仓库。</li><li><strong>备份脚本</strong>：<code>/backup.sh</code> 每天凌晨 2 点执行备份。</li></ul><p><strong>手动备份：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd argo-nezha-v1 &amp;&amp; chmod +x backup.sh &amp;&amp; ./backup.sh backup</span><br><span class="line">或</span><br><span class="line">docker exec -it argo-nezha-v1 /backup.sh backup</span><br></pre></td></tr></table></figure><p><strong>手动恢复：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在vps终端执行</span><br><span class="line">cd argo-nezha-v1 &amp;&amp; chmod +x backup.sh &amp;&amp; ./backup.sh restore</span><br><span class="line"># 在docker内执行</span><br><span class="line">docker exec -it argo-nezha-v1 /backup.sh restore</span><br></pre></td></tr></table></figure><h2 id="8-基础设置"><a href="#8-基础设置" class="headerlink" title="8. 基础设置"></a>8. 基础设置</h2><h3 id="8-1-Agent-设置"><a href="#8-1-Agent-设置" class="headerlink" title="8.1 Agent 设置"></a>8.1 Agent 设置</h3><ul><li><strong>Agent 对接地址</strong>：面板域名:443</li><li><strong>Agent 使用 TLS 连接</strong>：打勾</li><li><strong>前端真实 IP 请求头</strong>：<code>nz-realip</code>（不要填写 <code>CF-Connecting-lP</code>）</li></ul><h3 id="8-2-绑定-GitHub-登录"><a href="#8-2-绑定-GitHub-登录" class="headerlink" title="8.2 绑定 GitHub 登录"></a>8.2 绑定 GitHub 登录</h3><ol><li>修改 <code>/root/argo-nezha-v1/dashboard/config.yaml</code> 文件，加入 GitHub OAuth 配置：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">oauth2:</span><br><span class="line">  GitHub:</span><br><span class="line">    client_id: 你的 GitHub Client ID</span><br><span class="line">    client_secret: 你的 GitHub Client Secret</span><br><span class="line">    endpoint:</span><br><span class="line">      auth_url: https://github.com/login/oauth/authorize</span><br><span class="line">      token_url: https://github.com/login/oauth/access_token</span><br><span class="line">    user_id_path: id</span><br><span class="line">    user_info_url: https://api.github.com/user</span><br></pre></td></tr></table></figure><h3 id="8-3-禁止密码登录"><a href="#8-3-禁止密码登录" class="headerlink" title="8.3 禁止密码登录"></a>8.3 禁止密码登录</h3><ol><li>登录哪吒管理后台，进入个人设置，开启 <strong>OAuth2 绑定</strong>。</li></ol><h3 id="8-4-设置前端界面背景图"><a href="#8-4-设置前端界面背景图" class="headerlink" title="8.4 设置前端界面背景图"></a>8.4 设置前端界面背景图</h3><ol><li>进入 <strong>系统设置</strong> → <strong>自定义代码</strong>，输入以下代码：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    window.CustomBackgroundImage = &quot;背景图直链&quot;;</span><br><span class="line">    window.CustomDesc = &quot;VPS 探针&quot;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="8-5-设置-Telegram-通知"><a href="#8-5-设置-Telegram-通知" class="headerlink" title="8.5 设置 Telegram 通知"></a>8.5 设置 Telegram 通知</h3><ul><li>进入 <strong>系统设置</strong> → <strong>通知</strong>，点击 **+**创建通知。配置 <strong>URL</strong> 为以下格式：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.telegram.org/bot&lt;tg token&gt;/sendMessage?chat_id=&lt;tg id&gt;&amp;text=#NEZHA#</span><br></pre></td></tr></table></figure><ul><li>请替换 <code>&lt;tg token&gt;</code> 和 <code>&lt;tg id&gt;</code> 为你自己的 Telegram Bot Token 和 Chat ID。</li></ul><p><strong>设置警报规则</strong></p><ul><li>在 <strong>警报规则</strong> 中，点击 **+**创建规则。</li><li>选择 <strong>离线警报</strong>，并根据需要配置规则，指定警报触发条件。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;type&quot;:&quot;offline&quot;,&quot;duration&quot;:180,&quot;cover&quot;:0&#125;]</span><br></pre></td></tr></table></figure><p>这样就完成了 Telegram 通知和警报规则的设置。</p><ul><li>其他警报规则请看官方文档</li></ul>]]></content>
      
      
      <categories>
          
          <category> 哪吒面板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哪吒面板 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决哪吒面板删除服务器后 ID 不连续</title>
      <link href="/blog/2025/05/03/nezha-id/"/>
      <url>/blog/2025/05/03/nezha-id/</url>
      
        <content type="html"><![CDATA[<h2 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h2><p>本来以为哪吒面板删除服务器后会自动对其进行重新排序，结果确实会1，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if err == nil &#123;</span><br><span class="line">    // 删除服务器</span><br><span class="line">    singleton.ServerLock.Lock()</span><br><span class="line">    onServerDelete(id)</span><br><span class="line">    singleton.ServerLock.Unlock()</span><br><span class="line">    singleton.ReSortServer()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而删除之后 ID 还是不连续的，这让我强迫症犯了非常的难受，而且后台显示不连续就算了，访客查看居然也是不连续的（使用 Neko-Mdui 主题，其他主题不显示服务器 ID，可能没有这个困扰）。</p><p>2、代码分析<br>问题出在哪里呢？我们来看看 ReSortServer 方法，根据说明实现了一个排序功能：</p><p>ReSortServer 根据服务器 ID 对服务器列表进行排序（ID 越大越靠前）。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">func ReSortServer() &#123;</span><br><span class="line">    ServerLock.RLock()</span><br><span class="line">    defer ServerLock.RUnlock()</span><br><span class="line">    SortedServerLock.Lock()</span><br><span class="line">    defer SortedServerLock.Unlock()</span><br><span class="line"></span><br><span class="line">    SortedServerList = []*model.Server&#123;&#125;</span><br><span class="line">    SortedServerListForGuest = []*model.Server&#123;&#125;</span><br><span class="line">    for _, s := range ServerList &#123;</span><br><span class="line">        SortedServerList = append(SortedServerList, s)</span><br><span class="line">        if !s.HideForGuest &#123;</span><br><span class="line">            SortedServerListForGuest = append(SortedServerListForGuest, s)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 按照服务器 ID 排序的具体实现（ID 越大越靠前）</span><br><span class="line">    sort.SliceStable(SortedServerList, func(i, j int) bool &#123;</span><br><span class="line">        if SortedServerList[i].DisplayIndex == SortedServerList[j].DisplayIndex &#123;</span><br><span class="line">            return SortedServerList[i].ID &lt; SortedServerList[j].ID</span><br><span class="line">        &#125;</span><br><span class="line">        return SortedServerList[i].DisplayIndex &gt; SortedServerList[j].DisplayIndex</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    sort.SliceStable(SortedServerListForGuest, func(i, j int) bool &#123;</span><br><span class="line">        if SortedServerListForGuest[i].DisplayIndex == SortedServerListForGuest[j].DisplayIndex &#123;</span><br><span class="line">            return SortedServerListForGuest[i].ID &lt; SortedServerListForGuest[j].ID</span><br><span class="line">        &#125;</span><br><span class="line">        return SortedServerListForGuest[i].DisplayIndex &gt; SortedServerListForGuest[j].DisplayIndex</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯，没学过 Golang 看不懂，但是大致可以根据命名看出这个方法仅对列表进行排序，并不重新设置 ID。</p><p>3、解决方法<br>直接编辑 &#x2F;opt&#x2F;nezha&#x2F;dashboard&#x2F;data&#x2F;sqlite.db，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UPDATE servers</span><br><span class="line">SET id = (</span><br><span class="line">    SELECT COUNT(*) </span><br><span class="line">    FROM servers AS s </span><br><span class="line">    WHERE s.rowid &lt;= servers.rowid</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>即可解决。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 哪吒面板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青龙面板依赖</title>
      <link href="/blog/2025/05/03/qinglong-independence/"/>
      <url>/blog/2025/05/03/qinglong-independence/</url>
      
        <content type="html"><![CDATA[<h2 id="青龙依赖"><a href="#青龙依赖" class="headerlink" title="青龙依赖"></a>青龙依赖</h2><h3 id="NodeJs-依赖"><a href="#NodeJs-依赖" class="headerlink" title="NodeJs 依赖"></a>NodeJs 依赖</h3><p>以下是青龙在 NodeJs 环境中的依赖列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">axios</span><br><span class="line">request</span><br><span class="line">canvas</span><br><span class="line">cheerio</span><br><span class="line">js-base64</span><br><span class="line">dotenv</span><br><span class="line">magic</span><br><span class="line">tough-cookie</span><br><span class="line">ws@7.4.3</span><br><span class="line">require</span><br><span class="line">requests</span><br><span class="line">date-fns</span><br><span class="line">ts-md5</span><br><span class="line">typescript</span><br><span class="line">json5</span><br><span class="line">axios@v0.27.2</span><br><span class="line">crypto-js</span><br><span class="line">@types/node</span><br><span class="line">png-js</span><br><span class="line">node-telegram-bot-api</span><br><span class="line">fs</span><br><span class="line">jsdom</span><br><span class="line">form-data</span><br><span class="line">jieba</span><br><span class="line">tslib</span><br><span class="line">ds</span><br><span class="line">jsdom -g</span><br><span class="line">prettytable</span><br><span class="line">ql</span><br><span class="line">common</span><br><span class="line">node-jsencrypt</span><br><span class="line">juejin-helper</span><br><span class="line">moment</span><br><span class="line">global-agent</span><br></pre></td></tr></table></figure><h3 id="Python3-依赖"><a href="#Python3-依赖" class="headerlink" title="Python3 依赖"></a>Python3 依赖</h3><p>以下是青龙在 Python3 环境中的依赖列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rsa</span><br><span class="line">bs4</span><br><span class="line">telethon</span><br><span class="line">cacheout</span><br><span class="line">jieba</span><br><span class="line">PyExecJS</span><br><span class="line">ping3</span><br><span class="line">canvas</span><br><span class="line">Crypto</span><br><span class="line">ds</span><br><span class="line">requests</span><br><span class="line">pycryptodome</span><br></pre></td></tr></table></figure><h3 id="Linux-依赖"><a href="#Linux-依赖" class="headerlink" title="Linux 依赖"></a>Linux 依赖</h3><p>以下是青龙在 Linux 环境中的依赖列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bizCode</span><br><span class="line">bizMsg  </span><br><span class="line">lxml</span><br><span class="line">libc-dev</span><br><span class="line">gcc</span><br><span class="line">g++</span><br><span class="line">libffi-dev</span><br><span class="line">python3-dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 部署 </tag>
            
            <tag> 青龙面板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文档</title>
      <link href="/blog/2025/05/01/hexo-document/"/>
      <url>/blog/2025/05/01/hexo-document/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
